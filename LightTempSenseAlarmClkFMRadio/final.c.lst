
final.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001bac  00001c40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012d  00800122  00800122  00001c62  2**0
                  ALLOC
  3 .stab         00004b78  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a97  00000000  00000000  000067dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008273  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008284  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__ctors_end>
       4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      14:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      18:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      1c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_8>
      24:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      28:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      30:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_12>
      34:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      3c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      40:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__vector_16>
      44:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_18>
      4c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      50:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      54:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      58:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      5c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      60:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      64:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      68:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      6c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      70:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      74:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      78:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      7c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      80:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      84:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_33>
      88:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      8c:	61 01       	movw	r12, r2
      8e:	61 01       	movw	r12, r2
      90:	61 01       	movw	r12, r2
      92:	61 01       	movw	r12, r2
      94:	61 01       	movw	r12, r2
      96:	61 01       	movw	r12, r2
      98:	61 01       	movw	r12, r2
      9a:	61 01       	movw	r12, r2
      9c:	61 01       	movw	r12, r2
      9e:	61 01       	movw	r12, r2
      a0:	61 01       	movw	r12, r2
      a2:	61 01       	movw	r12, r2
      a4:	61 01       	movw	r12, r2
      a6:	61 01       	movw	r12, r2
      a8:	61 01       	movw	r12, r2
      aa:	61 01       	movw	r12, r2
      ac:	61 01       	movw	r12, r2
      ae:	61 01       	movw	r12, r2
      b0:	61 01       	movw	r12, r2
      b2:	61 01       	movw	r12, r2
      b4:	69 01       	movw	r12, r18
      b6:	66 01       	movw	r12, r12
      b8:	63 01       	movw	r12, r6
      ba:	6c 01       	movw	r12, r24
      bc:	6f 01       	movw	r12, r30
      be:	72 01       	movw	r14, r4
      c0:	75 01       	movw	r14, r10
      c2:	78 01       	movw	r14, r16
      c4:	7b 01       	movw	r14, r22
      c6:	7e 01       	movw	r14, r28
      c8:	81 01       	movw	r16, r2
      ca:	84 01       	movw	r16, r8
      cc:	87 01       	movw	r16, r14
      ce:	8a 01       	movw	r16, r20
      d0:	8d 01       	movw	r16, r26
      d2:	90 01       	movw	r18, r0
      d4:	93 01       	movw	r18, r6
      d6:	96 01       	movw	r18, r12
      d8:	99 01       	movw	r18, r18
      da:	9c 01       	movw	r18, r24
      dc:	9f 01       	movw	r18, r30
      de:	a2 01       	movw	r20, r4
      e0:	59 01       	movw	r10, r18
      e2:	59 01       	movw	r10, r18
      e4:	59 01       	movw	r10, r18
      e6:	59 01       	movw	r10, r18
      e8:	59 01       	movw	r10, r18
      ea:	59 01       	movw	r10, r18
      ec:	ec 0a       	sbc	r14, r28
      ee:	c3 0a       	sbc	r12, r19
      f0:	c3 0a       	sbc	r12, r19
      f2:	c3 0a       	sbc	r12, r19
      f4:	c3 0a       	sbc	r12, r19
      f6:	c3 0a       	sbc	r12, r19
      f8:	c3 0a       	sbc	r12, r19
      fa:	c3 0a       	sbc	r12, r19
      fc:	ec 0a       	sbc	r14, r28
      fe:	c3 0a       	sbc	r12, r19
     100:	c3 0a       	sbc	r12, r19
     102:	c3 0a       	sbc	r12, r19
     104:	c3 0a       	sbc	r12, r19
     106:	c3 0a       	sbc	r12, r19
     108:	c3 0a       	sbc	r12, r19
     10a:	c3 0a       	sbc	r12, r19
     10c:	f6 0a       	sbc	r15, r22
     10e:	c3 0a       	sbc	r12, r19
     110:	c3 0a       	sbc	r12, r19
     112:	c3 0a       	sbc	r12, r19
     114:	c3 0a       	sbc	r12, r19
     116:	c3 0a       	sbc	r12, r19
     118:	c3 0a       	sbc	r12, r19
     11a:	c3 0a       	sbc	r12, r19
     11c:	c3 0a       	sbc	r12, r19
     11e:	c3 0a       	sbc	r12, r19
     120:	c3 0a       	sbc	r12, r19
     122:	c3 0a       	sbc	r12, r19
     124:	c3 0a       	sbc	r12, r19
     126:	c3 0a       	sbc	r12, r19
     128:	c3 0a       	sbc	r12, r19
     12a:	c3 0a       	sbc	r12, r19
     12c:	f6 0a       	sbc	r15, r22
     12e:	c3 0a       	sbc	r12, r19
     130:	c3 0a       	sbc	r12, r19
     132:	c3 0a       	sbc	r12, r19
     134:	c3 0a       	sbc	r12, r19
     136:	c3 0a       	sbc	r12, r19
     138:	c3 0a       	sbc	r12, r19
     13a:	c3 0a       	sbc	r12, r19
     13c:	c3 0a       	sbc	r12, r19
     13e:	c3 0a       	sbc	r12, r19
     140:	c3 0a       	sbc	r12, r19
     142:	c3 0a       	sbc	r12, r19
     144:	c3 0a       	sbc	r12, r19
     146:	c3 0a       	sbc	r12, r19
     148:	c3 0a       	sbc	r12, r19
     14a:	c3 0a       	sbc	r12, r19
     14c:	0d 0b       	sbc	r16, r29
     14e:	c3 0a       	sbc	r12, r19
     150:	c3 0a       	sbc	r12, r19
     152:	c3 0a       	sbc	r12, r19
     154:	c3 0a       	sbc	r12, r19
     156:	c3 0a       	sbc	r12, r19
     158:	c3 0a       	sbc	r12, r19
     15a:	c3 0a       	sbc	r12, r19
     15c:	11 0b       	sbc	r17, r17
     15e:	c3 0a       	sbc	r12, r19
     160:	c3 0a       	sbc	r12, r19
     162:	c3 0a       	sbc	r12, r19
     164:	c3 0a       	sbc	r12, r19
     166:	c3 0a       	sbc	r12, r19
     168:	c3 0a       	sbc	r12, r19
     16a:	c3 0a       	sbc	r12, r19
     16c:	c3 0a       	sbc	r12, r19
     16e:	c3 0a       	sbc	r12, r19
     170:	c3 0a       	sbc	r12, r19
     172:	c3 0a       	sbc	r12, r19
     174:	c3 0a       	sbc	r12, r19
     176:	c3 0a       	sbc	r12, r19
     178:	c3 0a       	sbc	r12, r19
     17a:	c3 0a       	sbc	r12, r19
     17c:	1f 0b       	sbc	r17, r31
     17e:	c3 0a       	sbc	r12, r19
     180:	c3 0a       	sbc	r12, r19
     182:	c3 0a       	sbc	r12, r19
     184:	c3 0a       	sbc	r12, r19
     186:	c3 0a       	sbc	r12, r19
     188:	c3 0a       	sbc	r12, r19
     18a:	c3 0a       	sbc	r12, r19
     18c:	dd 0a       	sbc	r13, r29

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	ec ea       	ldi	r30, 0xAC	; 172
     1a2:	fb e1       	ldi	r31, 0x1B	; 27
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a2 32       	cpi	r26, 0x22	; 34
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	22 e0       	ldi	r18, 0x02	; 2
     1b6:	a2 e2       	ldi	r26, 0x22	; 34
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	af 34       	cpi	r26, 0x4F	; 79
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <main>
     1c8:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <_exit>

000001cc <__bad_interrupt>:
     1cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d0 <Change_Radio>:
void Init_Radio();  

uint8_t prev_encoder_state;

void Change_Radio(){
    fm_pwr_up();
     1d0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <fm_pwr_up>
//    _delay_ms(1);
    fm_tune_freq();
     1d4:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <fm_tune_freq>

000001d8 <__vector_8>:
//
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){STC_interrupt = TRUE;}
     1d8:	1f 92       	push	r1
     1da:	0f 92       	push	r0
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	0f 92       	push	r0
     1e0:	11 24       	eor	r1, r1
     1e2:	8f 93       	push	r24
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	80 93 3f 02 	sts	0x023F, r24
     1ea:	8f 91       	pop	r24
     1ec:	0f 90       	pop	r0
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	0f 90       	pop	r0
     1f2:	1f 90       	pop	r1
     1f4:	18 95       	reti

000001f6 <__vector_18>:
//******************************************************************************

ISR(USART0_RX_vect){
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	11 24       	eor	r1, r1
     200:	0b b6       	in	r0, 0x3b	; 59
     202:	0f 92       	push	r0
     204:	2f 93       	push	r18
     206:	3f 93       	push	r19
     208:	4f 93       	push	r20
     20a:	5f 93       	push	r21
     20c:	6f 93       	push	r22
     20e:	7f 93       	push	r23
     210:	8f 93       	push	r24
     212:	9f 93       	push	r25
     214:	af 93       	push	r26
     216:	bf 93       	push	r27
     218:	ef 93       	push	r30
     21a:	ff 93       	push	r31
    set_cursor(2,8);
     21c:	68 e0       	ldi	r22, 0x08	; 8
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	0e 94 0e 08 	call	0x101c	; 0x101c <set_cursor>
    static uint8_t i;
    rx_char = UDR0;              //get character
     224:	8c b1       	in	r24, 0x0c	; 12
     226:	80 93 94 01 	sts	0x0194, r24
    lcd_str_array[i++]=rx_char;  //store in array 
     22a:	e0 91 32 01 	lds	r30, 0x0132
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9e 0f       	add	r25, r30
     232:	90 93 32 01 	sts	0x0132, r25
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	e7 59       	subi	r30, 0x97	; 151
     23a:	fe 4f       	sbci	r31, 0xFE	; 254
     23c:	80 83       	st	Z, r24
    //if entire string has arrived, set flag, reset index
    if(rx_char == '\0'){
     23e:	81 11       	cpse	r24, r1
     240:	09 c0       	rjmp	.+18     	; 0x254 <__vector_18+0x5e>
	rcv_rdy=1; 
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 37 01 	sts	0x0137, r24
	lcd_str_array[--i]  = (' ');     //clear the count field
     248:	80 e2       	ldi	r24, 0x20	; 32
     24a:	80 83       	st	Z, r24
	lcd_str_array[i+1]  = (' ');
     24c:	81 83       	std	Z+1, r24	; 0x01
	lcd_str_array[i+2]  = (' ');
     24e:	82 83       	std	Z+2, r24	; 0x02
	i=0;  
     250:	10 92 32 01 	sts	0x0132, r1
    }
}
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	bf 91       	pop	r27
     25a:	af 91       	pop	r26
     25c:	9f 91       	pop	r25
     25e:	8f 91       	pop	r24
     260:	7f 91       	pop	r23
     262:	6f 91       	pop	r22
     264:	5f 91       	pop	r21
     266:	4f 91       	pop	r20
     268:	3f 91       	pop	r19
     26a:	2f 91       	pop	r18
     26c:	0f 90       	pop	r0
     26e:	0b be       	out	0x3b, r0	; 59
     270:	0f 90       	pop	r0
     272:	0f be       	out	0x3f, r0	; 63
     274:	0f 90       	pop	r0
     276:	1f 90       	pop	r1
     278:	18 95       	reti

0000027a <ADC_Input>:
//returns of the value of the voltage on this pin in a 16 bit integer value
//values range from about 0-1000, indicating 0V through 5V
//*************************************
void ADC_Input(){

    ADCSRA |=(1<<ADSC); //poke ADSC and start conversion
     27a:	36 9a       	sbi	0x06, 6	; 6

    while(bit_is_clear(ADCSRA, ADIF)){} //spin while interrupt flag not set
     27c:	34 9b       	sbis	0x06, 4	; 6
     27e:	fe cf       	rjmp	.-4      	; 0x27c <ADC_Input+0x2>

    ADCSRA |= (1<<ADIF);  //its done, clear flag by writing a one 
     280:	34 9a       	sbi	0x06, 4	; 6

    adc_result = ADC;                      //read the ADC output as 16 bits
     282:	84 b1       	in	r24, 0x04	; 4
     284:	95 b1       	in	r25, 0x05	; 5
     286:	90 93 5c 01 	sts	0x015C, r25
     28a:	80 93 5b 01 	sts	0x015B, r24
     28e:	08 95       	ret

00000290 <Set_Dim>:
//change the PWM output compare register to change how often PWM toggles
//the higher the voltage onthe ADC, the higher the brightness
//each value set for evensmoothing
//*************************************
void Set_Dim(){
    switch(adc_result/20){
     290:	20 91 5b 01 	lds	r18, 0x015B
     294:	30 91 5c 01 	lds	r19, 0x015C
     298:	ad ec       	ldi	r26, 0xCD	; 205
     29a:	bc ec       	ldi	r27, 0xCC	; 204
     29c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     2a0:	92 95       	swap	r25
     2a2:	82 95       	swap	r24
     2a4:	8f 70       	andi	r24, 0x0F	; 15
     2a6:	89 27       	eor	r24, r25
     2a8:	9f 70       	andi	r25, 0x0F	; 15
     2aa:	89 27       	eor	r24, r25
     2ac:	80 33       	cpi	r24, 0x30	; 48
     2ae:	91 05       	cpc	r25, r1
     2b0:	18 f0       	brcs	.+6      	; 0x2b8 <Set_Dim+0x28>
	case 4: OCR2 = 0x00; break;
	case 3: OCR2 = 0x00; break;
	case 2: OCR2 = 0x00; break;
	case 1: OCR2 = 0x00; break;
	case 0: OCR2 = 0x00; break;
	default: OCR2 = 0xff; break;
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
     2b4:	83 bd       	out	0x23, r24	; 35
     2b6:	08 95       	ret
//change the PWM output compare register to change how often PWM toggles
//the higher the voltage onthe ADC, the higher the brightness
//each value set for evensmoothing
//*************************************
void Set_Dim(){
    switch(adc_result/20){
     2b8:	fc 01       	movw	r30, r24
     2ba:	ea 5b       	subi	r30, 0xBA	; 186
     2bc:	ff 4f       	sbci	r31, 0xFF	; 255
     2be:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__tablejump2__>
	case 5: OCR2 = 0x00; break;
	case 4: OCR2 = 0x00; break;
	case 3: OCR2 = 0x00; break;
	case 2: OCR2 = 0x00; break;
	case 1: OCR2 = 0x00; break;
	case 0: OCR2 = 0x00; break;
     2c2:	13 bc       	out	0x23, r1	; 35
     2c4:	08 95       	ret
	case 27: OCR2 = 0x15; break;
	case 26: OCR2 = 0x12; break;
	case 25: OCR2 = 0x10; break;
	case 24: OCR2 = 0x0f; break;
	case 23: OCR2 = 0x08; break;
	case 22: OCR2 = 0x05; break;
     2c6:	85 e0       	ldi	r24, 0x05	; 5
     2c8:	83 bd       	out	0x23, r24	; 35
     2ca:	08 95       	ret
	case 21: OCR2 = 0x02; break;
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	83 bd       	out	0x23, r24	; 35
     2d0:	08 95       	ret
	case 20: OCR2 = 0x01; break;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	83 bd       	out	0x23, r24	; 35
     2d6:	08 95       	ret
	case 28: OCR2 = 0x1f; break;
	case 27: OCR2 = 0x15; break;
	case 26: OCR2 = 0x12; break;
	case 25: OCR2 = 0x10; break;
	case 24: OCR2 = 0x0f; break;
	case 23: OCR2 = 0x08; break;
     2d8:	88 e0       	ldi	r24, 0x08	; 8
     2da:	83 bd       	out	0x23, r24	; 35
     2dc:	08 95       	ret
	case 29: OCR2 = 0x2f; break;
	case 28: OCR2 = 0x1f; break;
	case 27: OCR2 = 0x15; break;
	case 26: OCR2 = 0x12; break;
	case 25: OCR2 = 0x10; break;
	case 24: OCR2 = 0x0f; break;
     2de:	8f e0       	ldi	r24, 0x0F	; 15
     2e0:	83 bd       	out	0x23, r24	; 35
     2e2:	08 95       	ret
	case 30: OCR2 = 0x3f; break;
	case 29: OCR2 = 0x2f; break;
	case 28: OCR2 = 0x1f; break;
	case 27: OCR2 = 0x15; break;
	case 26: OCR2 = 0x12; break;
	case 25: OCR2 = 0x10; break;
     2e4:	80 e1       	ldi	r24, 0x10	; 16
     2e6:	83 bd       	out	0x23, r24	; 35
     2e8:	08 95       	ret
	case 31: OCR2 = 0x4f; break;
	case 30: OCR2 = 0x3f; break;
	case 29: OCR2 = 0x2f; break;
	case 28: OCR2 = 0x1f; break;
	case 27: OCR2 = 0x15; break;
	case 26: OCR2 = 0x12; break;
     2ea:	82 e1       	ldi	r24, 0x12	; 18
     2ec:	83 bd       	out	0x23, r24	; 35
     2ee:	08 95       	ret
	case 32: OCR2 = 0x5f; break;
	case 31: OCR2 = 0x4f; break;
	case 30: OCR2 = 0x3f; break;
	case 29: OCR2 = 0x2f; break;
	case 28: OCR2 = 0x1f; break;
	case 27: OCR2 = 0x15; break;
     2f0:	85 e1       	ldi	r24, 0x15	; 21
     2f2:	83 bd       	out	0x23, r24	; 35
     2f4:	08 95       	ret
	case 33: OCR2 = 0x6f; break;
	case 32: OCR2 = 0x5f; break;
	case 31: OCR2 = 0x4f; break;
	case 30: OCR2 = 0x3f; break;
	case 29: OCR2 = 0x2f; break;
	case 28: OCR2 = 0x1f; break;
     2f6:	8f e1       	ldi	r24, 0x1F	; 31
     2f8:	83 bd       	out	0x23, r24	; 35
     2fa:	08 95       	ret
	case 34: OCR2 = 0x7f; break;
	case 33: OCR2 = 0x6f; break;
	case 32: OCR2 = 0x5f; break;
	case 31: OCR2 = 0x4f; break;
	case 30: OCR2 = 0x3f; break;
	case 29: OCR2 = 0x2f; break;
     2fc:	8f e2       	ldi	r24, 0x2F	; 47
     2fe:	83 bd       	out	0x23, r24	; 35
     300:	08 95       	ret
	case 35: OCR2 = 0x8f; break;
	case 34: OCR2 = 0x7f; break;
	case 33: OCR2 = 0x6f; break;
	case 32: OCR2 = 0x5f; break;
	case 31: OCR2 = 0x4f; break;
	case 30: OCR2 = 0x3f; break;
     302:	8f e3       	ldi	r24, 0x3F	; 63
     304:	83 bd       	out	0x23, r24	; 35
     306:	08 95       	ret
	case 36: OCR2 = 0x9f; break;
	case 35: OCR2 = 0x8f; break;
	case 34: OCR2 = 0x7f; break;
	case 33: OCR2 = 0x6f; break;
	case 32: OCR2 = 0x5f; break;
	case 31: OCR2 = 0x4f; break;
     308:	8f e4       	ldi	r24, 0x4F	; 79
     30a:	83 bd       	out	0x23, r24	; 35
     30c:	08 95       	ret
	case 37: OCR2 = 0xaf; break;
	case 36: OCR2 = 0x9f; break;
	case 35: OCR2 = 0x8f; break;
	case 34: OCR2 = 0x7f; break;
	case 33: OCR2 = 0x6f; break;
	case 32: OCR2 = 0x5f; break;
     30e:	8f e5       	ldi	r24, 0x5F	; 95
     310:	83 bd       	out	0x23, r24	; 35
     312:	08 95       	ret
	case 38: OCR2 = 0xbf; break;
	case 37: OCR2 = 0xaf; break;
	case 36: OCR2 = 0x9f; break;
	case 35: OCR2 = 0x8f; break;
	case 34: OCR2 = 0x7f; break;
	case 33: OCR2 = 0x6f; break;
     314:	8f e6       	ldi	r24, 0x6F	; 111
     316:	83 bd       	out	0x23, r24	; 35
     318:	08 95       	ret
	case 39: OCR2 = 0xcf; break;
	case 38: OCR2 = 0xbf; break;
	case 37: OCR2 = 0xaf; break;
	case 36: OCR2 = 0x9f; break;
	case 35: OCR2 = 0x8f; break;
	case 34: OCR2 = 0x7f; break;
     31a:	8f e7       	ldi	r24, 0x7F	; 127
     31c:	83 bd       	out	0x23, r24	; 35
     31e:	08 95       	ret
	case 40: OCR2 = 0xdf; break;
	case 39: OCR2 = 0xcf; break;
	case 38: OCR2 = 0xbf; break;
	case 37: OCR2 = 0xaf; break;
	case 36: OCR2 = 0x9f; break;
	case 35: OCR2 = 0x8f; break;
     320:	8f e8       	ldi	r24, 0x8F	; 143
     322:	83 bd       	out	0x23, r24	; 35
     324:	08 95       	ret
	case 41: OCR2 = 0xef; break;	//start dimming the display at this value
	case 40: OCR2 = 0xdf; break;
	case 39: OCR2 = 0xcf; break;
	case 38: OCR2 = 0xbf; break;
	case 37: OCR2 = 0xaf; break;
	case 36: OCR2 = 0x9f; break;
     326:	8f e9       	ldi	r24, 0x9F	; 159
     328:	83 bd       	out	0x23, r24	; 35
     32a:	08 95       	ret
	case 42: OCR2 = 0xff; break;
	case 41: OCR2 = 0xef; break;	//start dimming the display at this value
	case 40: OCR2 = 0xdf; break;
	case 39: OCR2 = 0xcf; break;
	case 38: OCR2 = 0xbf; break;
	case 37: OCR2 = 0xaf; break;
     32c:	8f ea       	ldi	r24, 0xAF	; 175
     32e:	83 bd       	out	0x23, r24	; 35
     330:	08 95       	ret
	case 43: OCR2 = 0xff; break;
	case 42: OCR2 = 0xff; break;
	case 41: OCR2 = 0xef; break;	//start dimming the display at this value
	case 40: OCR2 = 0xdf; break;
	case 39: OCR2 = 0xcf; break;
	case 38: OCR2 = 0xbf; break;
     332:	8f eb       	ldi	r24, 0xBF	; 191
     334:	83 bd       	out	0x23, r24	; 35
     336:	08 95       	ret
	case 44: OCR2 = 0xff; break;
	case 43: OCR2 = 0xff; break;
	case 42: OCR2 = 0xff; break;
	case 41: OCR2 = 0xef; break;	//start dimming the display at this value
	case 40: OCR2 = 0xdf; break;
	case 39: OCR2 = 0xcf; break;
     338:	8f ec       	ldi	r24, 0xCF	; 207
     33a:	83 bd       	out	0x23, r24	; 35
     33c:	08 95       	ret
	case 45: OCR2 = 0xff; break;
	case 44: OCR2 = 0xff; break;
	case 43: OCR2 = 0xff; break;
	case 42: OCR2 = 0xff; break;
	case 41: OCR2 = 0xef; break;	//start dimming the display at this value
	case 40: OCR2 = 0xdf; break;
     33e:	8f ed       	ldi	r24, 0xDF	; 223
     340:	83 bd       	out	0x23, r24	; 35
     342:	08 95       	ret
	case 46: OCR2 = 0xff; break;
	case 45: OCR2 = 0xff; break;
	case 44: OCR2 = 0xff; break;
	case 43: OCR2 = 0xff; break;
	case 42: OCR2 = 0xff; break;
	case 41: OCR2 = 0xef; break;	//start dimming the display at this value
     344:	8f ee       	ldi	r24, 0xEF	; 239
     346:	83 bd       	out	0x23, r24	; 35
     348:	08 95       	ret

0000034a <dec_to_7seg_init>:
}
//*****************************************
//Sets the values of the dec_to_7seg array to their corresponding values that will show up on the LED display
//*****************************************
void dec_to_7seg_init(){
    dec_to_7seg[0]=0b11000000;
     34a:	e9 e3       	ldi	r30, 0x39	; 57
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	80 ec       	ldi	r24, 0xC0	; 192
     350:	80 83       	st	Z, r24
    dec_to_7seg[1]=0b11111001;
     352:	89 ef       	ldi	r24, 0xF9	; 249
     354:	81 83       	std	Z+1, r24	; 0x01
    dec_to_7seg[2]=0b10100100;
     356:	84 ea       	ldi	r24, 0xA4	; 164
     358:	82 83       	std	Z+2, r24	; 0x02
    dec_to_7seg[3]=0b10110000;
     35a:	80 eb       	ldi	r24, 0xB0	; 176
     35c:	83 83       	std	Z+3, r24	; 0x03
    dec_to_7seg[4]=0b10011001;
     35e:	89 e9       	ldi	r24, 0x99	; 153
     360:	84 83       	std	Z+4, r24	; 0x04
    dec_to_7seg[5]=0b10010010;
     362:	82 e9       	ldi	r24, 0x92	; 146
     364:	85 83       	std	Z+5, r24	; 0x05
    dec_to_7seg[6]=0b10000010;
     366:	82 e8       	ldi	r24, 0x82	; 130
     368:	86 83       	std	Z+6, r24	; 0x06
    dec_to_7seg[7]=0b11111000;
     36a:	88 ef       	ldi	r24, 0xF8	; 248
     36c:	87 83       	std	Z+7, r24	; 0x07
    dec_to_7seg[8]=0b10000000;
     36e:	80 e8       	ldi	r24, 0x80	; 128
     370:	80 87       	std	Z+8, r24	; 0x08
    dec_to_7seg[9]=0b10010000;
     372:	80 e9       	ldi	r24, 0x90	; 144
     374:	81 87       	std	Z+9, r24	; 0x09
    dec_to_7seg[10]=0b11111111;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	82 87       	std	Z+10, r24	; 0x0a
     37a:	08 95       	ret

0000037c <tcnt0_init>:
//initializes the tcnt0 mode
//set to interrupt on compare match, uses external clock
//used to find the time each second for real world time
//*************************************
void tcnt0_init(void){
    TIMSK  |=  (1<<TOIE0); //enable TCNT0 overflow interrupt
     37c:	87 b7       	in	r24, 0x37	; 55
     37e:	81 60       	ori	r24, 0x01	; 1
     380:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1<<CS00)|(0<<CS01)|(0<<CS02); //normal mode
     382:	83 b7       	in	r24, 0x33	; 51
     384:	81 60       	ori	r24, 0x01	; 1
     386:	83 bf       	out	0x33, r24	; 51
    ASSR   |=  (1<<AS0);	//use external clock
     388:	80 b7       	in	r24, 0x30	; 48
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	80 bf       	out	0x30, r24	; 48
     38e:	08 95       	ret

00000390 <tcnt2_init>:
//initializes the tcnt2 mode
//PWM mode, inverted mode
//used for the dimming of the 7 seg as PWM source
//*************************************
void tcnt2_init(void){
    TCCR2  |=  (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<COM20)|(1<<CS20); //PWM mode, inverted mode
     390:	85 b5       	in	r24, 0x25	; 37
     392:	89 67       	ori	r24, 0x79	; 121
     394:	85 bd       	out	0x25, r24	; 37
    OCR2 = 0xff; //OCR2 intially high so that 7 seg is at max
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	83 bd       	out	0x23, r24	; 35
     39a:	08 95       	ret

0000039c <TCNT3_Init>:
//initializes the tcnt3 mode
//set the fast PWM with ICR3 at top 
//used to set the volume on the audio amplifer
//*************************************
void TCNT3_Init(void){
    DDRE |= (1<<PE3);
     39c:	13 9a       	sbi	0x02, 3	; 2
    //Fast PWM
    TCCR3A |= (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31);
     39e:	eb e8       	ldi	r30, 0x8B	; 139
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	82 6c       	ori	r24, 0xC2	; 194
     3a6:	80 83       	st	Z, r24
    //ICR3 as TOP
    TCCR3B |= (1<<WGM33) | (1<<WGM32) | (1<<CS30);
     3a8:	ea e8       	ldi	r30, 0x8A	; 138
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	89 61       	ori	r24, 0x19	; 25
     3b0:	80 83       	st	Z, r24
    OCR3A=0xF000; //set at this value	so it is initially off
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 ef       	ldi	r25, 0xF0	; 240
     3b6:	90 93 87 00 	sts	0x0087, r25
     3ba:	80 93 86 00 	sts	0x0086, r24
    ICR3 = 0xF000;	//cleared at this value
     3be:	90 93 81 00 	sts	0x0081, r25
     3c2:	80 93 80 00 	sts	0x0080, r24
     3c6:	08 95       	ret

000003c8 <change_normal_display>:

//*************************************
//change_normal_display
//set the noraml dispay time to match the value stored in the array using enodings for 7 seg
//*************************************
void change_normal_display(){
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
    uint8_t digit_value;	//dummy variable

    digit_value = normal_time[MINUTE] % 10; //minutes
     3cc:	25 e4       	ldi	r18, 0x45	; 69
     3ce:	31 e0       	ldi	r19, 0x01	; 1
     3d0:	f9 01       	movw	r30, r18
     3d2:	a1 81       	ldd	r26, Z+1	; 0x01
     3d4:	9d ec       	ldi	r25, 0xCD	; 205
     3d6:	a9 9f       	mul	r26, r25
     3d8:	81 2d       	mov	r24, r1
     3da:	11 24       	eor	r1, r1
     3dc:	86 95       	lsr	r24
     3de:	86 95       	lsr	r24
     3e0:	86 95       	lsr	r24
     3e2:	4a 2f       	mov	r20, r26
     3e4:	fa e0       	ldi	r31, 0x0A	; 10
     3e6:	8f 9f       	mul	r24, r31
     3e8:	40 19       	sub	r20, r0
     3ea:	11 24       	eor	r1, r1
     3ec:	84 2f       	mov	r24, r20
    normal_time_display[0] = dec_to_7seg[digit_value]; 	//set the new time for the display array
     3ee:	cd e7       	ldi	r28, 0x7D	; 125
     3f0:	d1 e0       	ldi	r29, 0x01	; 1
     3f2:	e4 2f       	mov	r30, r20
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e7 5c       	subi	r30, 0xC7	; 199
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	40 81       	ld	r20, Z
     3fc:	48 83       	st	Y, r20

    digit_value = normal_time[MINUTE] - (normal_time[MINUTE]%10);	//logic for second digit
     3fe:	a8 1b       	sub	r26, r24
    digit_value = digit_value/10;
     400:	a9 9f       	mul	r26, r25
     402:	a1 2d       	mov	r26, r1
     404:	11 24       	eor	r1, r1
     406:	a6 95       	lsr	r26
     408:	a6 95       	lsr	r26
     40a:	a6 95       	lsr	r26
    normal_time_display[1] = dec_to_7seg[digit_value]; 	//set the new time for the display array
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	a7 5c       	subi	r26, 0xC7	; 199
     410:	be 4f       	sbci	r27, 0xFE	; 254
     412:	8c 91       	ld	r24, X
     414:	89 83       	std	Y+1, r24	; 0x01

    digit_value = normal_time[HOUR] % 10; //minutes
     416:	d9 01       	movw	r26, r18
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	ec 91       	ld	r30, X
     41c:	e9 9f       	mul	r30, r25
     41e:	81 2d       	mov	r24, r1
     420:	11 24       	eor	r1, r1
     422:	86 95       	lsr	r24
     424:	86 95       	lsr	r24
     426:	86 95       	lsr	r24
     428:	fe 2f       	mov	r31, r30
     42a:	ba e0       	ldi	r27, 0x0A	; 10
     42c:	8b 9f       	mul	r24, r27
     42e:	f0 19       	sub	r31, r0
     430:	11 24       	eor	r1, r1
    normal_time_display[3] = dec_to_7seg[digit_value]; 
     432:	af 2f       	mov	r26, r31
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	a7 5c       	subi	r26, 0xC7	; 199
     438:	be 4f       	sbci	r27, 0xFE	; 254
     43a:	2c 91       	ld	r18, X
     43c:	2b 83       	std	Y+3, r18	; 0x03

    digit_value = normal_time[HOUR] - (normal_time[HOUR]%10);	//logic for second digit
     43e:	ef 1b       	sub	r30, r31
    digit_value = digit_value/10;
     440:	e9 9f       	mul	r30, r25
     442:	e1 2d       	mov	r30, r1
     444:	11 24       	eor	r1, r1
     446:	e6 95       	lsr	r30
     448:	e6 95       	lsr	r30
     44a:	e6 95       	lsr	r30
    normal_time_display[4] = dec_to_7seg[digit_value]; 	//set the new time for the display array
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	e7 5c       	subi	r30, 0xC7	; 199
     450:	fe 4f       	sbci	r31, 0xFE	; 254
     452:	80 81       	ld	r24, Z
     454:	8c 83       	std	Y+4, r24	; 0x04

}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <change_alarm_display>:
//*************************************
//change alarm display
//set the alarm display to match the value stored in the array for minute and hour
//*************************************
void change_alarm_display(){
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
    uint8_t digit_value;	//dummy variable

    digit_value = alarm_time[MINUTE] % 10; //minutes
     460:	28 e4       	ldi	r18, 0x48	; 72
     462:	31 e0       	ldi	r19, 0x01	; 1
     464:	f9 01       	movw	r30, r18
     466:	a1 81       	ldd	r26, Z+1	; 0x01
     468:	9d ec       	ldi	r25, 0xCD	; 205
     46a:	a9 9f       	mul	r26, r25
     46c:	81 2d       	mov	r24, r1
     46e:	11 24       	eor	r1, r1
     470:	86 95       	lsr	r24
     472:	86 95       	lsr	r24
     474:	86 95       	lsr	r24
     476:	4a 2f       	mov	r20, r26
     478:	fa e0       	ldi	r31, 0x0A	; 10
     47a:	8f 9f       	mul	r24, r31
     47c:	40 19       	sub	r20, r0
     47e:	11 24       	eor	r1, r1
     480:	84 2f       	mov	r24, r20
    alarm_time_display[0] = dec_to_7seg[digit_value]; 	//set this new time in the display array
     482:	c4 e6       	ldi	r28, 0x64	; 100
     484:	d1 e0       	ldi	r29, 0x01	; 1
     486:	e4 2f       	mov	r30, r20
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	e7 5c       	subi	r30, 0xC7	; 199
     48c:	fe 4f       	sbci	r31, 0xFE	; 254
     48e:	40 81       	ld	r20, Z
     490:	48 83       	st	Y, r20

    digit_value = alarm_time[MINUTE] - (alarm_time[MINUTE]%10);	//logic to see second digit
     492:	a8 1b       	sub	r26, r24
    digit_value = digit_value/10;
     494:	a9 9f       	mul	r26, r25
     496:	a1 2d       	mov	r26, r1
     498:	11 24       	eor	r1, r1
     49a:	a6 95       	lsr	r26
     49c:	a6 95       	lsr	r26
     49e:	a6 95       	lsr	r26
    alarm_time_display[1] = dec_to_7seg[digit_value]; 	//set this new time in the display array
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	a7 5c       	subi	r26, 0xC7	; 199
     4a4:	be 4f       	sbci	r27, 0xFE	; 254
     4a6:	8c 91       	ld	r24, X
     4a8:	89 83       	std	Y+1, r24	; 0x01

    digit_value = alarm_time[HOUR] % 10; //minutes
     4aa:	d9 01       	movw	r26, r18
     4ac:	12 96       	adiw	r26, 0x02	; 2
     4ae:	ec 91       	ld	r30, X
     4b0:	e9 9f       	mul	r30, r25
     4b2:	81 2d       	mov	r24, r1
     4b4:	11 24       	eor	r1, r1
     4b6:	86 95       	lsr	r24
     4b8:	86 95       	lsr	r24
     4ba:	86 95       	lsr	r24
     4bc:	fe 2f       	mov	r31, r30
     4be:	ba e0       	ldi	r27, 0x0A	; 10
     4c0:	8b 9f       	mul	r24, r27
     4c2:	f0 19       	sub	r31, r0
     4c4:	11 24       	eor	r1, r1
    alarm_time_display[3] = dec_to_7seg[digit_value]; 
     4c6:	af 2f       	mov	r26, r31
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	a7 5c       	subi	r26, 0xC7	; 199
     4cc:	be 4f       	sbci	r27, 0xFE	; 254
     4ce:	2c 91       	ld	r18, X
     4d0:	2b 83       	std	Y+3, r18	; 0x03

    digit_value = alarm_time[HOUR] - (alarm_time[HOUR]%10);	//logic to see second digit
     4d2:	ef 1b       	sub	r30, r31
    digit_value = digit_value/10;
     4d4:	e9 9f       	mul	r30, r25
     4d6:	e1 2d       	mov	r30, r1
     4d8:	11 24       	eor	r1, r1
     4da:	e6 95       	lsr	r30
     4dc:	e6 95       	lsr	r30
     4de:	e6 95       	lsr	r30
    alarm_time_display[4] = dec_to_7seg[digit_value]; 	//set this new time in the display array
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	e7 5c       	subi	r30, 0xC7	; 199
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254
     4e6:	80 81       	ld	r24, Z
     4e8:	8c 83       	std	Y+4, r24	; 0x04

}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <change_radio_display>:
void change_radio_display(){
    uint16_t digit_value;	//dummy variable
    uint16_t station;

    station = current_fm_freq/10;
     4f0:	20 91 02 01 	lds	r18, 0x0102
     4f4:	30 91 03 01 	lds	r19, 0x0103
     4f8:	ad ec       	ldi	r26, 0xCD	; 205
     4fa:	bc ec       	ldi	r27, 0xCC	; 204
     4fc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     500:	ac 01       	movw	r20, r24
     502:	56 95       	lsr	r21
     504:	47 95       	ror	r20
     506:	56 95       	lsr	r21
     508:	47 95       	ror	r20
     50a:	56 95       	lsr	r21
     50c:	47 95       	ror	r20

    //0
    digit_value  = station%10; //0x2706, arg2, arg3; 99.9Mhz, 200khz steps
     50e:	9a 01       	movw	r18, r20
     510:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     514:	bc 01       	movw	r22, r24
     516:	76 95       	lsr	r23
     518:	67 95       	ror	r22
     51a:	76 95       	lsr	r23
     51c:	67 95       	ror	r22
     51e:	76 95       	lsr	r23
     520:	67 95       	ror	r22
     522:	cb 01       	movw	r24, r22
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	66 0f       	add	r22, r22
     52a:	77 1f       	adc	r23, r23
     52c:	66 0f       	add	r22, r22
     52e:	77 1f       	adc	r23, r23
     530:	66 0f       	add	r22, r22
     532:	77 1f       	adc	r23, r23
     534:	68 0f       	add	r22, r24
     536:	79 1f       	adc	r23, r25
     538:	ca 01       	movw	r24, r20
     53a:	86 1b       	sub	r24, r22
     53c:	97 0b       	sbc	r25, r23
     53e:	bc 01       	movw	r22, r24
    digit_value &= 0b01111111;
    radio_time_display[0] = dec_to_7seg[digit_value]; 	//set this new time in the display array
     540:	fc 01       	movw	r30, r24
     542:	e7 5c       	subi	r30, 0xC7	; 199
     544:	fe 4f       	sbci	r31, 0xFE	; 254
     546:	80 81       	ld	r24, Z
     548:	80 93 86 01 	sts	0x0186, r24

    station = station - station%10;
     54c:	46 1b       	sub	r20, r22
     54e:	57 0b       	sbc	r21, r23

    //1
    digit_value = station%100;
     550:	9a 01       	movw	r18, r20
     552:	36 95       	lsr	r19
     554:	27 95       	ror	r18
     556:	36 95       	lsr	r19
     558:	27 95       	ror	r18
     55a:	ab e7       	ldi	r26, 0x7B	; 123
     55c:	b4 e1       	ldi	r27, 0x14	; 20
     55e:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     562:	fc 01       	movw	r30, r24
     564:	f6 95       	lsr	r31
     566:	e7 95       	ror	r30
     568:	24 e6       	ldi	r18, 0x64	; 100
     56a:	2e 9f       	mul	r18, r30
     56c:	c0 01       	movw	r24, r0
     56e:	2f 9f       	mul	r18, r31
     570:	90 0d       	add	r25, r0
     572:	11 24       	eor	r1, r1
     574:	fa 01       	movw	r30, r20
     576:	e8 1b       	sub	r30, r24
     578:	f9 0b       	sbc	r31, r25
    digit_value = digit_value/10;
     57a:	9f 01       	movw	r18, r30
     57c:	ad ec       	ldi	r26, 0xCD	; 205
     57e:	bc ec       	ldi	r27, 0xCC	; 204
     580:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     584:	96 95       	lsr	r25
     586:	87 95       	ror	r24
     588:	96 95       	lsr	r25
     58a:	87 95       	ror	r24
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
    radio_time_display[1] = dec_to_7seg[digit_value]; 	//set this new time in the display array
     590:	dc 01       	movw	r26, r24
     592:	a7 5c       	subi	r26, 0xC7	; 199
     594:	be 4f       	sbci	r27, 0xFE	; 254
    radio_time_display[1] &= 0b01111111;
     596:	8c 91       	ld	r24, X
     598:	8f 77       	andi	r24, 0x7F	; 127
     59a:	80 93 87 01 	sts	0x0187, r24

    station = station - station%100;
     59e:	4e 1b       	sub	r20, r30
     5a0:	5f 0b       	sbc	r21, r31

    //3
    digit_value = station%1000;
     5a2:	9a 01       	movw	r18, r20
     5a4:	36 95       	lsr	r19
     5a6:	27 95       	ror	r18
     5a8:	36 95       	lsr	r19
     5aa:	27 95       	ror	r18
     5ac:	36 95       	lsr	r19
     5ae:	27 95       	ror	r18
     5b0:	a5 ec       	ldi	r26, 0xC5	; 197
     5b2:	b0 e2       	ldi	r27, 0x20	; 32
     5b4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     5b8:	fc 01       	movw	r30, r24
     5ba:	f2 95       	swap	r31
     5bc:	e2 95       	swap	r30
     5be:	ef 70       	andi	r30, 0x0F	; 15
     5c0:	ef 27       	eor	r30, r31
     5c2:	ff 70       	andi	r31, 0x0F	; 15
     5c4:	ef 27       	eor	r30, r31
     5c6:	28 ee       	ldi	r18, 0xE8	; 232
     5c8:	33 e0       	ldi	r19, 0x03	; 3
     5ca:	e2 9f       	mul	r30, r18
     5cc:	c0 01       	movw	r24, r0
     5ce:	e3 9f       	mul	r30, r19
     5d0:	90 0d       	add	r25, r0
     5d2:	f2 9f       	mul	r31, r18
     5d4:	90 0d       	add	r25, r0
     5d6:	11 24       	eor	r1, r1
     5d8:	fa 01       	movw	r30, r20
     5da:	e8 1b       	sub	r30, r24
     5dc:	f9 0b       	sbc	r31, r25
    digit_value = digit_value/100;
     5de:	9f 01       	movw	r18, r30
     5e0:	36 95       	lsr	r19
     5e2:	27 95       	ror	r18
     5e4:	36 95       	lsr	r19
     5e6:	27 95       	ror	r18
     5e8:	ab e7       	ldi	r26, 0x7B	; 123
     5ea:	b4 e1       	ldi	r27, 0x14	; 20
     5ec:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     5f0:	96 95       	lsr	r25
     5f2:	87 95       	ror	r24
    radio_time_display[3] = dec_to_7seg[digit_value]; 	//set this new time in the display array
     5f4:	dc 01       	movw	r26, r24
     5f6:	a7 5c       	subi	r26, 0xC7	; 199
     5f8:	be 4f       	sbci	r27, 0xFE	; 254
     5fa:	8c 91       	ld	r24, X
     5fc:	80 93 89 01 	sts	0x0189, r24

    station = station - station%1000;
     600:	4e 1b       	sub	r20, r30
     602:	5f 0b       	sbc	r21, r31

    //4
    digit_value = station%10000;
     604:	9a 01       	movw	r18, r20
     606:	32 95       	swap	r19
     608:	22 95       	swap	r18
     60a:	2f 70       	andi	r18, 0x0F	; 15
     60c:	23 27       	eor	r18, r19
     60e:	3f 70       	andi	r19, 0x0F	; 15
     610:	23 27       	eor	r18, r19
     612:	a7 e4       	ldi	r26, 0x47	; 71
     614:	b3 e0       	ldi	r27, 0x03	; 3
     616:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     61a:	96 95       	lsr	r25
     61c:	87 95       	ror	r24
     61e:	96 95       	lsr	r25
     620:	87 95       	ror	r24
     622:	96 95       	lsr	r25
     624:	87 95       	ror	r24
     626:	60 e1       	ldi	r22, 0x10	; 16
     628:	77 e2       	ldi	r23, 0x27	; 39
     62a:	86 9f       	mul	r24, r22
     62c:	90 01       	movw	r18, r0
     62e:	87 9f       	mul	r24, r23
     630:	30 0d       	add	r19, r0
     632:	96 9f       	mul	r25, r22
     634:	30 0d       	add	r19, r0
     636:	11 24       	eor	r1, r1
     638:	ca 01       	movw	r24, r20
     63a:	82 1b       	sub	r24, r18
     63c:	93 0b       	sbc	r25, r19
    digit_value = digit_value/1000;
     63e:	9c 01       	movw	r18, r24
     640:	36 95       	lsr	r19
     642:	27 95       	ror	r18
     644:	36 95       	lsr	r19
     646:	27 95       	ror	r18
     648:	36 95       	lsr	r19
     64a:	27 95       	ror	r18
     64c:	a5 ec       	ldi	r26, 0xC5	; 197
     64e:	b0 e2       	ldi	r27, 0x20	; 32
     650:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__umulhisi3>
     654:	92 95       	swap	r25
     656:	82 95       	swap	r24
     658:	8f 70       	andi	r24, 0x0F	; 15
     65a:	89 27       	eor	r24, r25
     65c:	9f 70       	andi	r25, 0x0F	; 15
     65e:	89 27       	eor	r24, r25
    if(digit_value == 0){
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	11 f4       	brne	.+4      	; 0x668 <change_radio_display+0x178>
	digit_value = 10;
     664:	8a e0       	ldi	r24, 0x0A	; 10
     666:	90 e0       	ldi	r25, 0x00	; 0

    }
    radio_time_display[4] = dec_to_7seg[digit_value]; 	//set this new time in the display array
     668:	fc 01       	movw	r30, r24
     66a:	e7 5c       	subi	r30, 0xC7	; 199
     66c:	fe 4f       	sbci	r31, 0xFE	; 254
     66e:	80 81       	ld	r24, Z
     670:	80 93 8a 01 	sts	0x018A, r24


    radio_time_display[2] = 0b11111111; 	//set this new time in the display array
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	80 93 88 01 	sts	0x0188, r24
     67a:	08 95       	ret

0000067c <spiRecieve>:
//Recieves the input from the SPI interface
//*****************************************
uint8_t spiRecieve(void)
{
    uint8_t x;          //variable to store recieved value
    PORTE |= 0x80;  //Set PORTE7 high for loading parallel data from encoder
     67c:	1f 9a       	sbi	0x03, 7	; 3
    PORTE &= ~0x40; //Set PORTE6 low to load in parallel data from econders to buffer
     67e:	1e 98       	cbi	0x03, 6	; 3
    PORTE |= 0x40;  //Set PORTE6 back high
     680:	1e 9a       	sbi	0x03, 6	; 3
    PORTE &= ~0x80; //Set PORTE7 low to serially load out the contents from the encoder buffer
     682:	1f 98       	cbi	0x03, 7	; 3
    SPDR = 0x00; //send a dummy value to the SPI interface
     684:	1f b8       	out	0x0f, r1	; 15
    while(!(SPSR &(1<<SPIF))){}  //wait for SPI to finish sending
     686:	77 9b       	sbis	0x0e, 7	; 14
     688:	fe cf       	rjmp	.-4      	; 0x686 <spiRecieve+0xa>
    x = SPDR; //read the value loaded into the SPI buffer from the encoder buffer
     68a:	8f b1       	in	r24, 0x0f	; 15
    return x;
}
     68c:	08 95       	ret

0000068e <encoder_logic>:
void encoder_logic(void){
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	1f 92       	push	r1
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    i = ~spiRecieve();	//Recieves the input from the encoders and negates this
     698:	0e 94 3e 03 	call	0x67c	; 0x67c <spiRecieve>
     69c:	80 95       	com	r24
    switch(i & 0x03){   //look at bottom 2 bits of the recieved encoder byte
     69e:	98 2f       	mov	r25, r24
     6a0:	93 70       	andi	r25, 0x03	; 3
     6a2:	c9 f4       	brne	.+50     	; 0x6d6 <encoder_logic+0x48>
	case 0x00: 					//The value of the bottom 2 bits from the encoder
	    switch(prev_encoder_state & 0x03){		//compare to last encoder state
     6a4:	90 91 85 01 	lds	r25, 0x0185
     6a8:	93 70       	andi	r25, 0x03	; 3
     6aa:	91 30       	cpi	r25, 0x01	; 1
     6ac:	d1 f0       	breq	.+52     	; 0x6e2 <encoder_logic+0x54>
     6ae:	92 30       	cpi	r25, 0x02	; 2
     6b0:	91 f4       	brne	.+36     	; 0x6d6 <encoder_logic+0x48>
		case 0x02: 
		    current_fm_freq += 20; 
     6b2:	20 91 02 01 	lds	r18, 0x0102
     6b6:	30 91 03 01 	lds	r19, 0x0103
     6ba:	2c 5e       	subi	r18, 0xEC	; 236
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
     6be:	30 93 03 01 	sts	0x0103, r19
     6c2:	20 93 02 01 	sts	0x0102, r18
		    change_radio_display();  
     6c6:	89 83       	std	Y+1, r24	; 0x01
     6c8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <change_radio_display>
		    if(Radio_On == TRUE)
     6cc:	90 91 79 01 	lds	r25, 0x0179
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	91 30       	cpi	r25, 0x01	; 1
     6d4:	69 f0       	breq	.+26     	; 0x6f0 <encoder_logic+0x62>
		default: break;
	    }
	    break;                                
    }

    prev_encoder_state = i;	//now set the current encoder state to the stored encoder state for next interrupt
     6d6:	80 93 85 01 	sts	0x0185, r24
}
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret
		    change_radio_display();  
		    if(Radio_On == TRUE)
			Change_Radio();
		    break;    	//turned clockwise, set increment to 1
		case 0x01: 
		    current_fm_freq -= 20; 
     6e2:	20 91 02 01 	lds	r18, 0x0102
     6e6:	30 91 03 01 	lds	r19, 0x0103
     6ea:	24 51       	subi	r18, 0x14	; 20
     6ec:	31 09       	sbc	r19, r1
     6ee:	e7 cf       	rjmp	.-50     	; 0x6be <encoder_logic+0x30>
void Init_Radio();  

uint8_t prev_encoder_state;

void Change_Radio(){
    fm_pwr_up();
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <fm_pwr_up>
//    _delay_ms(1);
    fm_tune_freq();
     6f6:	0e 94 c8 0b 	call	0x1790	; 0x1790 <fm_tune_freq>
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	ec cf       	rjmp	.-40     	; 0x6d6 <encoder_logic+0x48>

000006fe <Compare_Alarm_To_Normal>:
//Compare_Alarm_To_Normal
//used to see if the current time matches the alarm set time
//check the hour, minute and second for both the alarm time and the snooze time
//*************************************
uint8_t Compare_Alarm_To_Normal(){
    if(alarm_time[HOUR] == normal_time[HOUR]){
     6fe:	80 91 47 01 	lds	r24, 0x0147
     702:	90 91 4a 01 	lds	r25, 0x014A
     706:	98 17       	cp	r25, r24
     708:	a9 f0       	breq	.+42     	; 0x734 <Compare_Alarm_To_Normal+0x36>
	if(alarm_time[MINUTE]==normal_time[MINUTE])
	    if(alarm_time[SECOND]==normal_time[SECOND])
		return TRUE;	//return true if all the times match between normal time and alarm time
    }
    if(snooze_time[HOUR] == normal_time[HOUR]){
     70a:	90 91 84 01 	lds	r25, 0x0184
     70e:	89 17       	cp	r24, r25
     710:	11 f0       	breq	.+4      	; 0x716 <Compare_Alarm_To_Normal+0x18>
	if(snooze_time[MINUTE]==normal_time[MINUTE])
	    if(snooze_time[SECOND]==normal_time[SECOND])
		return TRUE;	//return true if all the times match between normal time and snooze time
    }
    return FALSE;	//otherwise, return false
     712:	80 e0       	ldi	r24, 0x00	; 0
}
     714:	08 95       	ret
	if(alarm_time[MINUTE]==normal_time[MINUTE])
	    if(alarm_time[SECOND]==normal_time[SECOND])
		return TRUE;	//return true if all the times match between normal time and alarm time
    }
    if(snooze_time[HOUR] == normal_time[HOUR]){
	if(snooze_time[MINUTE]==normal_time[MINUTE])
     716:	90 91 83 01 	lds	r25, 0x0183
     71a:	80 91 46 01 	lds	r24, 0x0146
     71e:	98 13       	cpse	r25, r24
     720:	f8 cf       	rjmp	.-16     	; 0x712 <Compare_Alarm_To_Normal+0x14>
	    if(snooze_time[SECOND]==normal_time[SECOND])
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	20 91 82 01 	lds	r18, 0x0182
     728:	90 91 45 01 	lds	r25, 0x0145
     72c:	29 17       	cp	r18, r25
     72e:	91 f3       	breq	.-28     	; 0x714 <Compare_Alarm_To_Normal+0x16>
		return TRUE;	//return true if all the times match between normal time and snooze time
    }
    return FALSE;	//otherwise, return false
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	f0 cf       	rjmp	.-32     	; 0x714 <Compare_Alarm_To_Normal+0x16>
//used to see if the current time matches the alarm set time
//check the hour, minute and second for both the alarm time and the snooze time
//*************************************
uint8_t Compare_Alarm_To_Normal(){
    if(alarm_time[HOUR] == normal_time[HOUR]){
	if(alarm_time[MINUTE]==normal_time[MINUTE])
     734:	20 91 49 01 	lds	r18, 0x0149
     738:	90 91 46 01 	lds	r25, 0x0146
     73c:	29 13       	cpse	r18, r25
     73e:	e5 cf       	rjmp	.-54     	; 0x70a <Compare_Alarm_To_Normal+0xc>
	    if(alarm_time[SECOND]==normal_time[SECOND])
     740:	20 91 48 01 	lds	r18, 0x0148
     744:	90 91 45 01 	lds	r25, 0x0145
     748:	29 13       	cpse	r18, r25
     74a:	df cf       	rjmp	.-66     	; 0x70a <Compare_Alarm_To_Normal+0xc>
		return TRUE;	//return true if all the times match between normal time and alarm time
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	08 95       	ret

00000750 <Enable_Alarm>:
//Enable Alarm
//Turn on the volume of PWM to max
//Turn on the interrupt for compare match
//*************************************
void Enable_Alarm(){
    OCR3A = 0x0000;	//turn on the volume to max by making PWM always on
     750:	10 92 87 00 	sts	0x0087, r1
     754:	10 92 86 00 	sts	0x0086, r1
    TIMSK |= (1<<OCIE1A);	//enable the interrupts
     758:	87 b7       	in	r24, 0x37	; 55
     75a:	80 61       	ori	r24, 0x10	; 16
     75c:	87 bf       	out	0x37, r24	; 55
    alarm_on = TRUE;	// set the state for alarm going off
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 63 01 	sts	0x0163, r24
     764:	08 95       	ret

00000766 <Disable_Alarm>:
//Disable Alarm
//turn off the alarm by ignoring the output compare interrupt
//Also turn on or turn off the volume
//*************************************
void Disable_Alarm(){
    OCR3A = 0xFFFF;	//set the volume off by making the PWM always off, prevents static on the speakers
     766:	8f ef       	ldi	r24, 0xFF	; 255
     768:	9f ef       	ldi	r25, 0xFF	; 255
     76a:	90 93 87 00 	sts	0x0087, r25
     76e:	80 93 86 00 	sts	0x0086, r24
    TIMSK &= ~(1<<OCIE1A);	//turn of the interrupt
     772:	87 b7       	in	r24, 0x37	; 55
     774:	8f 7e       	andi	r24, 0xEF	; 239
     776:	87 bf       	out	0x37, r24	; 55
    alarm_on = FALSE;	//set the state of the alarm
     778:	10 92 63 01 	sts	0x0163, r1
     77c:	08 95       	ret

0000077e <__vector_12>:
//*************************************
//ISR for the TCNT1 compare on CTC mode
//this sets the tone of the sound pin going to the audio amplifier
//the OCR1A is changed so that the tone changes from beeps to tones
//*************************************
ISR(TIMER1_COMPA_vect){
     77e:	1f 92       	push	r1
     780:	0f 92       	push	r0
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	0f 92       	push	r0
     786:	11 24       	eor	r1, r1
     788:	2f 93       	push	r18
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25

    TCCR1A = 0x00;	//disable the pin connected to the OCR1A output so that it does not mess up the 7 seg display
     78e:	1f bc       	out	0x2f, r1	; 47

    alarm_count++;	//increment the alarm count for beeping and music control
     790:	80 91 7a 01 	lds	r24, 0x017A
     794:	90 91 7b 01 	lds	r25, 0x017B
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	90 93 7b 01 	sts	0x017B, r25
     79e:	80 93 7a 01 	sts	0x017A, r24

    if(alarm_count % 2 == 0){	//toggle the PORTD pin 3 pin which connects to audio amplifier on the even counts
     7a2:	80 fd       	sbrc	r24, 0
     7a4:	2a c0       	rjmp	.+84     	; 0x7fa <__vector_12+0x7c>
	PORTD |= (1<<PD3);
     7a6:	93 9a       	sbi	0x12, 3	; 18
    }
    else{	//toggle the PORTD pin 3 on the odd counts
	PORTD &= ~(1<<PD3);
    }
    switch(alarm_count){	//creates weird tones by changing the OCR1A register value
     7a8:	80 91 7a 01 	lds	r24, 0x017A
     7ac:	90 91 7b 01 	lds	r25, 0x017B
     7b0:	8a 39       	cpi	r24, 0x9A	; 154
     7b2:	21 e0       	ldi	r18, 0x01	; 1
     7b4:	92 07       	cpc	r25, r18
     7b6:	09 f4       	brne	.+2      	; 0x7ba <__vector_12+0x3c>
     7b8:	a4 c0       	rjmp	.+328    	; 0x902 <__vector_12+0x184>
     7ba:	08 f5       	brcc	.+66     	; 0x7fe <__vector_12+0x80>
     7bc:	84 3b       	cpi	r24, 0xB4	; 180
     7be:	91 05       	cpc	r25, r1
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <__vector_12+0x46>
     7c2:	75 c0       	rjmp	.+234    	; 0x8ae <__vector_12+0x130>
     7c4:	08 f4       	brcc	.+2      	; 0x7c8 <__vector_12+0x4a>
     7c6:	41 c0       	rjmp	.+130    	; 0x84a <__vector_12+0xcc>
     7c8:	8a 34       	cpi	r24, 0x4A	; 74
     7ca:	21 e0       	ldi	r18, 0x01	; 1
     7cc:	92 07       	cpc	r25, r18
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <__vector_12+0x54>
     7d0:	88 c0       	rjmp	.+272    	; 0x8e2 <__vector_12+0x164>
     7d2:	08 f0       	brcs	.+2      	; 0x7d6 <__vector_12+0x58>
     7d4:	71 c0       	rjmp	.+226    	; 0x8b8 <__vector_12+0x13a>
     7d6:	86 33       	cpi	r24, 0x36	; 54
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	92 07       	cpc	r25, r18
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <__vector_12+0x62>
     7de:	91 c0       	rjmp	.+290    	; 0x902 <__vector_12+0x184>
     7e0:	80 34       	cpi	r24, 0x40	; 64
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	92 07       	cpc	r25, r18
     7e6:	09 f4       	brne	.+2      	; 0x7ea <__vector_12+0x6c>
     7e8:	64 c0       	rjmp	.+200    	; 0x8b2 <__vector_12+0x134>
     7ea:	85 3b       	cpi	r24, 0xB5	; 181
     7ec:	91 05       	cpc	r25, r1
     7ee:	29 f5       	brne	.+74     	; 0x83a <__vector_12+0xbc>
	case 40: OCR1A = 0x0120; break;
	case 50: OCR1A = 0x0150; break;
	case 60: OCR1A = 0x0020; break;
		 //random sounds
	case 180: OCR1A = 0xffff; break;	//random sounds
	case 181: OCR1A = 0x0040; break;
     7f0:	80 e4       	ldi	r24, 0x40	; 64
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	9b bd       	out	0x2b, r25	; 43
     7f6:	8a bd       	out	0x2a, r24	; 42
     7f8:	20 c0       	rjmp	.+64     	; 0x83a <__vector_12+0xbc>

    if(alarm_count % 2 == 0){	//toggle the PORTD pin 3 pin which connects to audio amplifier on the even counts
	PORTD |= (1<<PD3);
    }
    else{	//toggle the PORTD pin 3 on the odd counts
	PORTD &= ~(1<<PD3);
     7fa:	93 98       	cbi	0x12, 3	; 18
     7fc:	d5 cf       	rjmp	.-86     	; 0x7a8 <__vector_12+0x2a>
    }
    switch(alarm_count){	//creates weird tones by changing the OCR1A register value
     7fe:	82 31       	cpi	r24, 0x12	; 18
     800:	22 e0       	ldi	r18, 0x02	; 2
     802:	92 07       	cpc	r25, r18
     804:	09 f4       	brne	.+2      	; 0x808 <__vector_12+0x8a>
     806:	9d c0       	rjmp	.+314    	; 0x942 <__vector_12+0x1c4>
     808:	a0 f1       	brcs	.+104    	; 0x872 <__vector_12+0xf4>
     80a:	86 3c       	cpi	r24, 0xC6	; 198
     80c:	22 e0       	ldi	r18, 0x02	; 2
     80e:	92 07       	cpc	r25, r18
     810:	09 f4       	brne	.+2      	; 0x814 <__vector_12+0x96>
     812:	9c c0       	rjmp	.+312    	; 0x94c <__vector_12+0x1ce>
     814:	08 f0       	brcs	.+2      	; 0x818 <__vector_12+0x9a>
     816:	40 c0       	rjmp	.+128    	; 0x898 <__vector_12+0x11a>
     818:	86 32       	cpi	r24, 0x26	; 38
     81a:	22 e0       	ldi	r18, 0x02	; 2
     81c:	92 07       	cpc	r25, r18
     81e:	09 f4       	brne	.+2      	; 0x822 <__vector_12+0xa4>
     820:	70 c0       	rjmp	.+224    	; 0x902 <__vector_12+0x184>
     822:	80 33       	cpi	r24, 0x30	; 48
     824:	22 e0       	ldi	r18, 0x02	; 2
     826:	92 07       	cpc	r25, r18
     828:	09 f4       	brne	.+2      	; 0x82c <__vector_12+0xae>
     82a:	7c c0       	rjmp	.+248    	; 0x924 <__vector_12+0x1a6>
     82c:	8c 31       	cpi	r24, 0x1C	; 28
     82e:	92 40       	sbci	r25, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__vector_12+0xbc>
	case 550: OCR1A = 0x0150; break;
	case 560: OCR1A = 0x0060; break;
	case 710: OCR1A = 0x0050; break;
		  //random sounds
	case 1200: OCR1A = 0xffff; break;
	case 1201: OCR1A = 0x0020; break;
     832:	80 e2       	ldi	r24, 0x20	; 32
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	9b bd       	out	0x2b, r25	; 43
     838:	8a bd       	out	0x2a, r24	; 42
	case 1401: alarm_count = 0; break;	//set the alarm count back to 0 to repeat this pattern

    }
}
     83a:	9f 91       	pop	r25
     83c:	8f 91       	pop	r24
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	1f 90       	pop	r1
     848:	18 95       	reti
	PORTD |= (1<<PD3);
    }
    else{	//toggle the PORTD pin 3 on the odd counts
	PORTD &= ~(1<<PD3);
    }
    switch(alarm_count){	//creates weird tones by changing the OCR1A register value
     84a:	8e 31       	cpi	r24, 0x1E	; 30
     84c:	91 05       	cpc	r25, r1
     84e:	09 f4       	brne	.+2      	; 0x852 <__vector_12+0xd4>
     850:	48 c0       	rjmp	.+144    	; 0x8e2 <__vector_12+0x164>
     852:	08 f4       	brcc	.+2      	; 0x856 <__vector_12+0xd8>
     854:	4b c0       	rjmp	.+150    	; 0x8ec <__vector_12+0x16e>
     856:	82 33       	cpi	r24, 0x32	; 50
     858:	91 05       	cpc	r25, r1
     85a:	09 f4       	brne	.+2      	; 0x85e <__vector_12+0xe0>
     85c:	52 c0       	rjmp	.+164    	; 0x902 <__vector_12+0x184>
     85e:	8c 33       	cpi	r24, 0x3C	; 60
     860:	91 05       	cpc	r25, r1
     862:	39 f3       	breq	.-50     	; 0x832 <__vector_12+0xb4>
     864:	88 97       	sbiw	r24, 0x28	; 40
     866:	49 f7       	brne	.-46     	; 0x83a <__vector_12+0xbc>
	case 350: OCR1A = 0x0150; break;
	case 360: OCR1A = 0x0140; break;
	case 410: OCR1A = 0x0150; break;
	case 420: OCR1A = 0x0140; break;
	case 430: OCR1A = 0x0130; break;
	case 440: OCR1A = 0x0120; break;	//random sounds
     868:	80 e2       	ldi	r24, 0x20	; 32
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	9b bd       	out	0x2b, r25	; 43
     86e:	8a bd       	out	0x2a, r24	; 42
     870:	e4 cf       	rjmp	.-56     	; 0x83a <__vector_12+0xbc>
	PORTD |= (1<<PD3);
    }
    else{	//toggle the PORTD pin 3 on the odd counts
	PORTD &= ~(1<<PD3);
    }
    switch(alarm_count){	//creates weird tones by changing the OCR1A register value
     872:	88 3b       	cpi	r24, 0xB8	; 184
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	92 07       	cpc	r25, r18
     878:	b9 f3       	breq	.-18     	; 0x868 <__vector_12+0xea>
     87a:	58 f1       	brcs	.+86     	; 0x8d2 <__vector_12+0x154>
     87c:	8e 3f       	cpi	r24, 0xFE	; 254
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	92 07       	cpc	r25, r18
     882:	09 f4       	brne	.+2      	; 0x886 <__vector_12+0x108>
     884:	59 c0       	rjmp	.+178    	; 0x938 <__vector_12+0x1ba>
     886:	88 30       	cpi	r24, 0x08	; 8
     888:	22 e0       	ldi	r18, 0x02	; 2
     88a:	92 07       	cpc	r25, r18
     88c:	09 f4       	brne	.+2      	; 0x890 <__vector_12+0x112>
     88e:	4f c0       	rjmp	.+158    	; 0x92e <__vector_12+0x1b0>
     890:	82 3c       	cpi	r24, 0xC2	; 194
     892:	91 40       	sbci	r25, 0x01	; 1
     894:	91 f6       	brne	.-92     	; 0x83a <__vector_12+0xbc>
     896:	cd cf       	rjmp	.-102    	; 0x832 <__vector_12+0xb4>
     898:	81 3b       	cpi	r24, 0xB1	; 177
     89a:	24 e0       	ldi	r18, 0x04	; 4
     89c:	92 07       	cpc	r25, r18
     89e:	49 f2       	breq	.-110    	; 0x832 <__vector_12+0xb4>
     8a0:	89 37       	cpi	r24, 0x79	; 121
     8a2:	25 e0       	ldi	r18, 0x05	; 5
     8a4:	92 07       	cpc	r25, r18
     8a6:	c9 f1       	breq	.+114    	; 0x91a <__vector_12+0x19c>
     8a8:	80 3b       	cpi	r24, 0xB0	; 176
     8aa:	94 40       	sbci	r25, 0x04	; 4
     8ac:	31 f6       	brne	.-116    	; 0x83a <__vector_12+0xbc>
	case 540: OCR1A = 0x0020; break;
	case 550: OCR1A = 0x0150; break;
	case 560: OCR1A = 0x0060; break;
	case 710: OCR1A = 0x0050; break;
		  //random sounds
	case 1200: OCR1A = 0xffff; break;
     8ae:	8f ef       	ldi	r24, 0xFF	; 255
     8b0:	9f ef       	ldi	r25, 0xFF	; 255
     8b2:	9b bd       	out	0x2b, r25	; 43
     8b4:	8a bd       	out	0x2a, r24	; 42
     8b6:	c1 cf       	rjmp	.-126    	; 0x83a <__vector_12+0xbc>
	PORTD |= (1<<PD3);
    }
    else{	//toggle the PORTD pin 3 on the odd counts
	PORTD &= ~(1<<PD3);
    }
    switch(alarm_count){	//creates weird tones by changing the OCR1A register value
     8b8:	8e 35       	cpi	r24, 0x5E	; 94
     8ba:	21 e0       	ldi	r18, 0x01	; 1
     8bc:	92 07       	cpc	r25, r18
     8be:	09 f1       	breq	.+66     	; 0x902 <__vector_12+0x184>
     8c0:	88 36       	cpi	r24, 0x68	; 104
     8c2:	21 e0       	ldi	r18, 0x01	; 1
     8c4:	92 07       	cpc	r25, r18
     8c6:	c1 f0       	breq	.+48     	; 0x8f8 <__vector_12+0x17a>
     8c8:	84 35       	cpi	r24, 0x54	; 84
     8ca:	91 40       	sbci	r25, 0x01	; 1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <__vector_12+0x152>
     8ce:	b5 cf       	rjmp	.-150    	; 0x83a <__vector_12+0xbc>
     8d0:	cb cf       	rjmp	.-106    	; 0x868 <__vector_12+0xea>
     8d2:	84 3a       	cpi	r24, 0xA4	; 164
     8d4:	21 e0       	ldi	r18, 0x01	; 1
     8d6:	92 07       	cpc	r25, r18
     8d8:	79 f0       	breq	.+30     	; 0x8f8 <__vector_12+0x17a>
     8da:	8e 3a       	cpi	r24, 0xAE	; 174
     8dc:	91 40       	sbci	r25, 0x01	; 1
     8de:	09 f0       	breq	.+2      	; 0x8e2 <__vector_12+0x164>
     8e0:	ac cf       	rjmp	.-168    	; 0x83a <__vector_12+0xbc>
	case 340: OCR1A = 0x0120; break;
	case 350: OCR1A = 0x0150; break;
	case 360: OCR1A = 0x0140; break;
	case 410: OCR1A = 0x0150; break;
	case 420: OCR1A = 0x0140; break;
	case 430: OCR1A = 0x0130; break;
     8e2:	80 e3       	ldi	r24, 0x30	; 48
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	9b bd       	out	0x2b, r25	; 43
     8e8:	8a bd       	out	0x2a, r24	; 42
     8ea:	a7 cf       	rjmp	.-178    	; 0x83a <__vector_12+0xbc>
	PORTD |= (1<<PD3);
    }
    else{	//toggle the PORTD pin 3 on the odd counts
	PORTD &= ~(1<<PD3);
    }
    switch(alarm_count){	//creates weird tones by changing the OCR1A register value
     8ec:	8a 30       	cpi	r24, 0x0A	; 10
     8ee:	91 05       	cpc	r25, r1
     8f0:	41 f0       	breq	.+16     	; 0x902 <__vector_12+0x184>
     8f2:	44 97       	sbiw	r24, 0x14	; 20
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <__vector_12+0x17a>
     8f6:	a1 cf       	rjmp	.-190    	; 0x83a <__vector_12+0xbc>
	case 330: OCR1A = 0x0130; break;
	case 340: OCR1A = 0x0120; break;
	case 350: OCR1A = 0x0150; break;
	case 360: OCR1A = 0x0140; break;
	case 410: OCR1A = 0x0150; break;
	case 420: OCR1A = 0x0140; break;
     8f8:	80 e4       	ldi	r24, 0x40	; 64
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	9b bd       	out	0x2b, r25	; 43
     8fe:	8a bd       	out	0x2a, r24	; 42
     900:	9c cf       	rjmp	.-200    	; 0x83a <__vector_12+0xbc>

	case 510: OCR1A = 0x0250; break;
	case 520: OCR1A = 0x0100; break;
	case 530: OCR1A = 0x0160; break;	//random sounds
	case 540: OCR1A = 0x0020; break;
	case 550: OCR1A = 0x0150; break;
     902:	80 e5       	ldi	r24, 0x50	; 80
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	9b bd       	out	0x2b, r25	; 43
     908:	8a bd       	out	0x2a, r24	; 42
	case 1200: OCR1A = 0xffff; break;
	case 1201: OCR1A = 0x0020; break;
	case 1401: alarm_count = 0; break;	//set the alarm count back to 0 to repeat this pattern

    }
}
     90a:	9f 91       	pop	r25
     90c:	8f 91       	pop	r24
     90e:	2f 91       	pop	r18
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti
	case 560: OCR1A = 0x0060; break;
	case 710: OCR1A = 0x0050; break;
		  //random sounds
	case 1200: OCR1A = 0xffff; break;
	case 1201: OCR1A = 0x0020; break;
	case 1401: alarm_count = 0; break;	//set the alarm count back to 0 to repeat this pattern
     91a:	10 92 7b 01 	sts	0x017B, r1
     91e:	10 92 7a 01 	sts	0x017A, r1
     922:	8b cf       	rjmp	.-234    	; 0x83a <__vector_12+0xbc>
	case 510: OCR1A = 0x0250; break;
	case 520: OCR1A = 0x0100; break;
	case 530: OCR1A = 0x0160; break;	//random sounds
	case 540: OCR1A = 0x0020; break;
	case 550: OCR1A = 0x0150; break;
	case 560: OCR1A = 0x0060; break;
     924:	80 e6       	ldi	r24, 0x60	; 96
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	9b bd       	out	0x2b, r25	; 43
     92a:	8a bd       	out	0x2a, r24	; 42
     92c:	86 cf       	rjmp	.-244    	; 0x83a <__vector_12+0xbc>
	case 430: OCR1A = 0x0130; break;
	case 440: OCR1A = 0x0120; break;	//random sounds
	case 450: OCR1A = 0x0020; break;

	case 510: OCR1A = 0x0250; break;
	case 520: OCR1A = 0x0100; break;
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	9b bd       	out	0x2b, r25	; 43
     934:	8a bd       	out	0x2a, r24	; 42
     936:	81 cf       	rjmp	.-254    	; 0x83a <__vector_12+0xbc>
	case 420: OCR1A = 0x0140; break;
	case 430: OCR1A = 0x0130; break;
	case 440: OCR1A = 0x0120; break;	//random sounds
	case 450: OCR1A = 0x0020; break;

	case 510: OCR1A = 0x0250; break;
     938:	80 e5       	ldi	r24, 0x50	; 80
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	9b bd       	out	0x2b, r25	; 43
     93e:	8a bd       	out	0x2a, r24	; 42
     940:	7c cf       	rjmp	.-264    	; 0x83a <__vector_12+0xbc>
	case 520: OCR1A = 0x0100; break;
	case 530: OCR1A = 0x0160; break;	//random sounds
     942:	80 e6       	ldi	r24, 0x60	; 96
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	9b bd       	out	0x2b, r25	; 43
     948:	8a bd       	out	0x2a, r24	; 42
     94a:	77 cf       	rjmp	.-274    	; 0x83a <__vector_12+0xbc>
	case 540: OCR1A = 0x0020; break;
	case 550: OCR1A = 0x0150; break;
	case 560: OCR1A = 0x0060; break;
	case 710: OCR1A = 0x0050; break;
     94c:	80 e5       	ldi	r24, 0x50	; 80
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	9b bd       	out	0x2b, r25	; 43
     952:	8a bd       	out	0x2a, r24	; 42
     954:	72 cf       	rjmp	.-284    	; 0x83a <__vector_12+0xbc>

00000956 <chk_buttons>:
//push so a debounce and toggle function can be implemented at the same time.  
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
uint8_t chk_buttons(){
     956:	e2 e2       	ldi	r30, 0x22	; 34
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	ac e8       	ldi	r26, 0x8C	; 140
     95c:	b1 e0       	ldi	r27, 0x01	; 1
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
    uint8_t i=0;  //make a counter variable
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};  //set the state for each button to 0 initially
    while(i<8){  //function adapted from debouce in lab1 code, checks each pin in in porta for if it was pressed
	state[i]= (state[i]<< 1) | (! bit_is_clear(PINA, i)) | 0xE000;  //check if the pin was pressed
     962:	99 b3       	in	r25, 0x19	; 25
     964:	20 81       	ld	r18, Z
     966:	31 81       	ldd	r19, Z+1	; 0x01
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	30 6e       	ori	r19, 0xE0	; 224
     96e:	89 2f       	mov	r24, r25
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	04 2e       	mov	r0, r20
     974:	02 c0       	rjmp	.+4      	; 0x97a <chk_buttons+0x24>
     976:	95 95       	asr	r25
     978:	87 95       	ror	r24
     97a:	0a 94       	dec	r0
     97c:	e2 f7       	brpl	.-8      	; 0x976 <chk_buttons+0x20>
     97e:	81 70       	andi	r24, 0x01	; 1
     980:	99 27       	eor	r25, r25
     982:	82 2b       	or	r24, r18
     984:	93 2b       	or	r25, r19
     986:	81 93       	st	Z+, r24
     988:	91 93       	st	Z+, r25
	if (state[i] == 0xF000){  //if the pin was pressed, store this information in debounced_state variable
     98a:	81 15       	cp	r24, r1
     98c:	90 4f       	sbci	r25, 0xF0	; 240
     98e:	41 f0       	breq	.+16     	; 0x9a0 <chk_buttons+0x4a>
	    debounced_state[i] = 1;
	    return 1;
	}
	else{
	    debounced_state[i] = 0;
     990:	1d 92       	st	X+, r1
     992:	4f 5f       	subi	r20, 0xFF	; 255
     994:	5f 4f       	sbci	r21, 0xFF	; 255
//external loop delay times 12. 
//
uint8_t chk_buttons(){
    uint8_t i=0;  //make a counter variable
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};  //set the state for each button to 0 initially
    while(i<8){  //function adapted from debouce in lab1 code, checks each pin in in porta for if it was pressed
     996:	48 30       	cpi	r20, 0x08	; 8
     998:	51 05       	cpc	r21, r1
     99a:	19 f7       	brne	.-58     	; 0x962 <chk_buttons+0xc>
	else{
	    debounced_state[i] = 0;
	    i+=1;
	}
    }
    return 0;
     99c:	80 e0       	ldi	r24, 0x00	; 0
}
     99e:	08 95       	ret
    uint8_t i=0;  //make a counter variable
    static uint16_t state[8] = {0,0,0,0,0,0,0,0};  //set the state for each button to 0 initially
    while(i<8){  //function adapted from debouce in lab1 code, checks each pin in in porta for if it was pressed
	state[i]= (state[i]<< 1) | (! bit_is_clear(PINA, i)) | 0xE000;  //check if the pin was pressed
	if (state[i] == 0xF000){  //if the pin was pressed, store this information in debounced_state variable
	    debounced_state[i] = 1;
     9a0:	fa 01       	movw	r30, r20
     9a2:	e4 57       	subi	r30, 0x74	; 116
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	80 83       	st	Z, r24
	    return 1;
     9aa:	08 95       	ret

000009ac <LED_display>:
//*********************************
//LED_display function  
//Displays the contents in the segment_data array to the LED display on PORTA
//Changes PORTB to cycle through the digital display LEDs
//*********************************
void LED_display(uint8_t* array){
     9ac:	fc 01       	movw	r30, r24

    PORTA = array[0]; //send 7 segment code to LED segments
     9ae:	80 81       	ld	r24, Z
     9b0:	8b bb       	out	0x1b, r24	; 27
    PORTB = 0x00; //send PORTB the digit to display
     9b2:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b4:	8f e1       	ldi	r24, 0x1F	; 31
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <LED_display+0xc>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <LED_display+0x12>
     9be:	00 00       	nop
    _delay_ms(0.2);  //delay the display so that it has time to light up
    PORTA = array[1]; //update digit to display
     9c0:	81 81       	ldd	r24, Z+1	; 0x01
     9c2:	8b bb       	out	0x1b, r24	; 27
    PORTB = 0x10;
     9c4:	80 e1       	ldi	r24, 0x10	; 16
     9c6:	88 bb       	out	0x18, r24	; 24
     9c8:	8f e1       	ldi	r24, 0x1F	; 31
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <LED_display+0x20>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <LED_display+0x26>
     9d2:	00 00       	nop
    _delay_ms(0.2);
    PORTA = array[2]; //update digit to display
     9d4:	82 81       	ldd	r24, Z+2	; 0x02
     9d6:	8b bb       	out	0x1b, r24	; 27
    PORTB = 0x20;
     9d8:	80 e2       	ldi	r24, 0x20	; 32
     9da:	88 bb       	out	0x18, r24	; 24
     9dc:	8f e1       	ldi	r24, 0x1F	; 31
     9de:	93 e0       	ldi	r25, 0x03	; 3
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <LED_display+0x34>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <LED_display+0x3a>
     9e6:	00 00       	nop
    _delay_ms(0.2);
    PORTA = array[3];
     9e8:	83 81       	ldd	r24, Z+3	; 0x03
     9ea:	8b bb       	out	0x1b, r24	; 27
    PORTB = 0x30;
     9ec:	80 e3       	ldi	r24, 0x30	; 48
     9ee:	88 bb       	out	0x18, r24	; 24
     9f0:	8f e1       	ldi	r24, 0x1F	; 31
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <LED_display+0x48>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <LED_display+0x4e>
     9fa:	00 00       	nop
    _delay_ms(0.2);
    PORTA = array[4];
     9fc:	84 81       	ldd	r24, Z+4	; 0x04
     9fe:	8b bb       	out	0x1b, r24	; 27
    PORTB = 0x40;
     a00:	80 e4       	ldi	r24, 0x40	; 64
     a02:	88 bb       	out	0x18, r24	; 24
     a04:	8f e1       	ldi	r24, 0x1F	; 31
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <LED_display+0x5c>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <LED_display+0x62>
     a0e:	00 00       	nop
    _delay_ms(0.2);
    PORTB = 0x60;
     a10:	80 e6       	ldi	r24, 0x60	; 96
     a12:	88 bb       	out	0x18, r24	; 24
     a14:	08 95       	ret

00000a16 <Time_Display>:
//*************************************
//Time_Display
//Determines which display should be put on the 7 seg and calls that function
//*************************************
void Time_Display(){
    switch(mode_display){	//check mode_display to see which mode the display should be in
     a16:	80 91 38 01 	lds	r24, 0x0138
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	61 f0       	breq	.+24     	; 0xa36 <Time_Display+0x20>
     a1e:	38 f0       	brcs	.+14     	; 0xa2e <Time_Display+0x18>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	21 f4       	brne	.+8      	; 0xa2c <Time_Display+0x16>
	    break;
	case NORMAL:
	    LED_display(normal_time_display);	 //set the display on the seven segment display
	    break;
	case RADIO:
	    LED_display(radio_time_display);
     a24:	86 e8       	ldi	r24, 0x86	; 134
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <LED_display>
     a2c:	08 95       	ret
    switch(mode_display){	//check mode_display to see which mode the display should be in
	case ALARM: 		//based on defines at the top
	    LED_display(alarm_time_display);	 //set the display on the seven segment display
	    break;
	case NORMAL:
	    LED_display(normal_time_display);	 //set the display on the seven segment display
     a2e:	8d e7       	ldi	r24, 0x7D	; 125
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <LED_display>
//Determines which display should be put on the 7 seg and calls that function
//*************************************
void Time_Display(){
    switch(mode_display){	//check mode_display to see which mode the display should be in
	case ALARM: 		//based on defines at the top
	    LED_display(alarm_time_display);	 //set the display on the seven segment display
     a36:	84 e6       	ldi	r24, 0x64	; 100
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <LED_display>

00000a3e <Local_Temp>:
	lcd_str_array[i+2]  = (' ');
	i=0;  
    }
}
void Local_Temp(uint16_t lm73_temp){
    set_cursor(2,2);
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	0e 94 0e 08 	call	0x101c	; 0x101c <set_cursor>
    twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temperature data from LM73 (2 bytes) 
     a46:	42 e0       	ldi	r20, 0x02	; 2
     a48:	67 ec       	ldi	r22, 0xC7	; 199
     a4a:	71 e0       	ldi	r23, 0x01	; 1
     a4c:	80 e9       	ldi	r24, 0x90	; 144
     a4e:	0e 94 4f 0b 	call	0x169e	; 0x169e <twi_start_rd>
    Time_Display();
     a52:	0e 94 0b 05 	call	0xa16	; 0xa16 <Time_Display>
    lm73_temp = lm73_rd_buf[0]; //save high temperature byte into lm73_temp
     a56:	e7 ec       	ldi	r30, 0xC7	; 199
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	80 81       	ld	r24, Z
     a5c:	90 e0       	ldi	r25, 0x00	; 0
    lm73_temp = (lm73_temp<<8); //shift it into upper byte 
     a5e:	98 2f       	mov	r25, r24
     a60:	88 27       	eor	r24, r24
    lm73_temp |= lm73_rd_buf[1]; //"OR" in the low temp byte to lm73_temp 
     a62:	21 81       	ldd	r18, Z+1	; 0x01
     a64:	82 2b       	or	r24, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a66:	4a e0       	ldi	r20, 0x0A	; 10
     a68:	6b e4       	ldi	r22, 0x4B	; 75
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	88 0f       	add	r24, r24
     a6e:	89 2f       	mov	r24, r25
     a70:	88 1f       	adc	r24, r24
     a72:	99 0b       	sbc	r25, r25
     a74:	91 95       	neg	r25
     a76:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__itoa_ncheck>
    itoa(lm73_temp>>7,temp_str_array, 10); //convert to string in array with itoa() from avr-libc                           
    string2lcd(temp_str_array); //send the string to LCD (lcd_functions)
     a7a:	8b e4       	ldi	r24, 0x4B	; 75
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <string2lcd>

00000a82 <__vector_16>:
//ISR for timer 0 overflow
//Each time timer 0 reaches top, update the real world time
//Also check the brightness and update the dimness for this
//brightness checked here because brightness does not need to be updated very often (20-30 fps is fine to human eye)
//*************************************
ISR(TIMER0_OVF_vect){
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	0b b6       	in	r0, 0x3b	; 59
     a8e:	0f 92       	push	r0
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
    timer0_counter++;	//update the global timer
     aa8:	80 91 7c 01 	lds	r24, 0x017C
     aac:	8f 5f       	subi	r24, 0xFF	; 255
     aae:	80 93 7c 01 	sts	0x017C, r24
    if(timer0_counter % 10 ==0){   // at about 13x per second, check the brightness in the outside world and update the PWM
     ab2:	9d ec       	ldi	r25, 0xCD	; 205
     ab4:	89 9f       	mul	r24, r25
     ab6:	91 2d       	mov	r25, r1
     ab8:	11 24       	eor	r1, r1
     aba:	96 95       	lsr	r25
     abc:	96 95       	lsr	r25
     abe:	96 95       	lsr	r25
     ac0:	38 2f       	mov	r19, r24
     ac2:	2a e0       	ldi	r18, 0x0A	; 10
     ac4:	92 9f       	mul	r25, r18
     ac6:	30 19       	sub	r19, r0
     ac8:	11 24       	eor	r1, r1
     aca:	31 11       	cpse	r19, r1
     acc:	0e c0       	rjmp	.+28     	; 0xaea <__vector_16+0x68>
//returns of the value of the voltage on this pin in a 16 bit integer value
//values range from about 0-1000, indicating 0V through 5V
//*************************************
void ADC_Input(){

    ADCSRA |=(1<<ADSC); //poke ADSC and start conversion
     ace:	36 9a       	sbi	0x06, 6	; 6

    while(bit_is_clear(ADCSRA, ADIF)){} //spin while interrupt flag not set
     ad0:	34 9b       	sbis	0x06, 4	; 6
     ad2:	fe cf       	rjmp	.-4      	; 0xad0 <__vector_16+0x4e>

    ADCSRA |= (1<<ADIF);  //its done, clear flag by writing a one 
     ad4:	34 9a       	sbi	0x06, 4	; 6

    adc_result = ADC;                      //read the ADC output as 16 bits
     ad6:	84 b1       	in	r24, 0x04	; 4
     ad8:	95 b1       	in	r25, 0x05	; 5
     ada:	90 93 5c 01 	sts	0x015C, r25
     ade:	80 93 5b 01 	sts	0x015B, r24
//*************************************
ISR(TIMER0_OVF_vect){
    timer0_counter++;	//update the global timer
    if(timer0_counter % 10 ==0){   // at about 13x per second, check the brightness in the outside world and update the PWM
	ADC_Input();	//get the brightness from the ADC light sensor
	Set_Dim();	//set the PWM dimness on the 7 seg display PWM pin
     ae2:	0e 94 48 01 	call	0x290	; 0x290 <Set_Dim>
     ae6:	80 91 7c 01 	lds	r24, 0x017C
    }
    if(timer0_counter == 64){	//half second interval
     aea:	80 34       	cpi	r24, 0x40	; 64
     aec:	09 f4       	brne	.+2      	; 0xaf0 <__vector_16+0x6e>
     aee:	44 c0       	rjmp	.+136    	; 0xb78 <__vector_16+0xf6>
	uart_putc('c');
	normal_time_display[2] &= 0b11111100;	//turn on the colon so that it blinks on every half second
    }
    else if(timer0_counter == 128){	//one second interval
     af0:	80 38       	cpi	r24, 0x80	; 128
     af2:	29 f1       	breq	.+74     	; 0xb3e <__vector_16+0xbc>
	}
	timer0_counter = 0;	//each second, set the time back to 0
	Local_Temp(lm73_temp);
    }

    if(alarm_armed){	//check if alarm is set to go off, only do this is alarm is armed
     af4:	80 91 8b 01 	lds	r24, 0x018B
     af8:	88 23       	and	r24, r24
     afa:	71 f0       	breq	.+28     	; 0xb18 <__vector_16+0x96>
	if(Compare_Alarm_To_Normal()){	//returns true if the compare match is found between the real time and the time set for the alarm to go off
     afc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Compare_Alarm_To_Normal>
     b00:	88 23       	and	r24, r24
     b02:	51 f0       	breq	.+20     	; 0xb18 <__vector_16+0x96>
//Enable Alarm
//Turn on the volume of PWM to max
//Turn on the interrupt for compare match
//*************************************
void Enable_Alarm(){
    OCR3A = 0x0000;	//turn on the volume to max by making PWM always on
     b04:	10 92 87 00 	sts	0x0087, r1
     b08:	10 92 86 00 	sts	0x0086, r1
    TIMSK |= (1<<OCIE1A);	//enable the interrupts
     b0c:	87 b7       	in	r24, 0x37	; 55
     b0e:	80 61       	ori	r24, 0x10	; 16
     b10:	87 bf       	out	0x37, r24	; 55
    alarm_on = TRUE;	// set the state for alarm going off
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 63 01 	sts	0x0163, r24
    if(alarm_armed){	//check if alarm is set to go off, only do this is alarm is armed
	if(Compare_Alarm_To_Normal()){	//returns true if the compare match is found between the real time and the time set for the alarm to go off
	    Enable_Alarm();	//turn the alarm on if these checks pass
	}
    }
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0b be       	out	0x3b, r0	; 59
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f 90       	pop	r0
     b3a:	1f 90       	pop	r1
     b3c:	18 95       	reti
    if(timer0_counter == 64){	//half second interval
	uart_putc('c');
	normal_time_display[2] &= 0b11111100;	//turn on the colon so that it blinks on every half second
    }
    else if(timer0_counter == 128){	//one second interval
	normal_time_display[2] |= 0b00000011;	//turn colon back off so that it blinks off every half second
     b3e:	80 91 7f 01 	lds	r24, 0x017F
     b42:	83 60       	ori	r24, 0x03	; 3
     b44:	80 93 7f 01 	sts	0x017F, r24

	normal_time[SECOND]++;	//add a second to the real world time since a second has elapsed
     b48:	80 91 45 01 	lds	r24, 0x0145
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 45 01 	sts	0x0145, r24
	if(normal_time[SECOND] == 60){	// do some logic to see if the minute needs to be incremented
     b52:	8c 33       	cpi	r24, 0x3C	; 60
     b54:	f9 f0       	breq	.+62     	; 0xb94 <__vector_16+0x112>
	    normal_time[MINUTE]++; 
	    normal_time[SECOND] = 0;
	    change_normal_display();	//update the 7 seg display
	}
	if(normal_time[MINUTE] == 60){	//check if an hour needs to be added 
     b56:	80 91 46 01 	lds	r24, 0x0146
     b5a:	8c 33       	cpi	r24, 0x3C	; 60
     b5c:	29 f1       	breq	.+74     	; 0xba8 <__vector_16+0x126>
	    normal_time[HOUR]++; 
	    normal_time[MINUTE] = 0;
	    change_normal_display();	//update the 7 seg display
	}
	if(normal_time[HOUR] == 24){	//check if the hour needs to roll over to 0
     b5e:	80 91 47 01 	lds	r24, 0x0147
     b62:	88 31       	cpi	r24, 0x18	; 24
     b64:	91 f0       	breq	.+36     	; 0xb8a <__vector_16+0x108>
	    normal_time[HOUR] = 0;
	    change_normal_display();	//update the 7 seg display
	}
	timer0_counter = 0;	//each second, set the time back to 0
     b66:	10 92 7c 01 	sts	0x017C, r1
	Local_Temp(lm73_temp);
     b6a:	80 91 5d 01 	lds	r24, 0x015D
     b6e:	90 91 5e 01 	lds	r25, 0x015E
     b72:	0e 94 1f 05 	call	0xa3e	; 0xa3e <Local_Temp>
     b76:	be cf       	rjmp	.-132    	; 0xaf4 <__vector_16+0x72>
    if(timer0_counter % 10 ==0){   // at about 13x per second, check the brightness in the outside world and update the PWM
	ADC_Input();	//get the brightness from the ADC light sensor
	Set_Dim();	//set the PWM dimness on the 7 seg display PWM pin
    }
    if(timer0_counter == 64){	//half second interval
	uart_putc('c');
     b78:	83 e6       	ldi	r24, 0x63	; 99
     b7a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <uart_putc>
	normal_time_display[2] &= 0b11111100;	//turn on the colon so that it blinks on every half second
     b7e:	80 91 7f 01 	lds	r24, 0x017F
     b82:	8c 7f       	andi	r24, 0xFC	; 252
     b84:	80 93 7f 01 	sts	0x017F, r24
     b88:	b5 cf       	rjmp	.-150    	; 0xaf4 <__vector_16+0x72>
	    normal_time[HOUR]++; 
	    normal_time[MINUTE] = 0;
	    change_normal_display();	//update the 7 seg display
	}
	if(normal_time[HOUR] == 24){	//check if the hour needs to roll over to 0
	    normal_time[HOUR] = 0;
     b8a:	10 92 47 01 	sts	0x0147, r1
	    change_normal_display();	//update the 7 seg display
     b8e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <change_normal_display>
     b92:	e9 cf       	rjmp	.-46     	; 0xb66 <__vector_16+0xe4>
    else if(timer0_counter == 128){	//one second interval
	normal_time_display[2] |= 0b00000011;	//turn colon back off so that it blinks off every half second

	normal_time[SECOND]++;	//add a second to the real world time since a second has elapsed
	if(normal_time[SECOND] == 60){	// do some logic to see if the minute needs to be incremented
	    normal_time[MINUTE]++; 
     b94:	80 91 46 01 	lds	r24, 0x0146
     b98:	8f 5f       	subi	r24, 0xFF	; 255
     b9a:	80 93 46 01 	sts	0x0146, r24
	    normal_time[SECOND] = 0;
     b9e:	10 92 45 01 	sts	0x0145, r1
	    change_normal_display();	//update the 7 seg display
     ba2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <change_normal_display>
     ba6:	d7 cf       	rjmp	.-82     	; 0xb56 <__vector_16+0xd4>
	}
	if(normal_time[MINUTE] == 60){	//check if an hour needs to be added 
	    normal_time[HOUR]++; 
     ba8:	80 91 47 01 	lds	r24, 0x0147
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	80 93 47 01 	sts	0x0147, r24
	    normal_time[MINUTE] = 0;
     bb2:	10 92 46 01 	sts	0x0146, r1
	    change_normal_display();	//update the 7 seg display
     bb6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <change_normal_display>
     bba:	d1 cf       	rjmp	.-94     	; 0xb5e <__vector_16+0xdc>

00000bbc <Sync_Snooze>:
//Snyc_Snooze function
//Sets the snooze time to be equal to the alarm time
//makes sure that the snooze time matches up with the alarm
//*************************************
void Sync_Snooze(){
    snooze_time[SECOND]=alarm_time[SECOND];    
     bbc:	e2 e8       	ldi	r30, 0x82	; 130
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	a8 e4       	ldi	r26, 0x48	; 72
     bc2:	b1 e0       	ldi	r27, 0x01	; 1
     bc4:	8c 91       	ld	r24, X
     bc6:	80 83       	st	Z, r24
    snooze_time[MINUTE]=alarm_time[MINUTE];    
     bc8:	11 96       	adiw	r26, 0x01	; 1
     bca:	8c 91       	ld	r24, X
     bcc:	11 97       	sbiw	r26, 0x01	; 1
     bce:	81 83       	std	Z+1, r24	; 0x01
    snooze_time[HOUR]=alarm_time[HOUR];    
     bd0:	12 96       	adiw	r26, 0x02	; 2
     bd2:	8c 91       	ld	r24, X
     bd4:	82 83       	std	Z+2, r24	; 0x02
     bd6:	08 95       	ret

00000bd8 <Snooze>:
//Snooze function
//Sets the snooze time to be 10 seconds more than the current time
//if this rolls over, make sure makes logical sense time wise, for example, no 25oclock
//*************************************
void Snooze(){
    snooze_time[HOUR] = normal_time[HOUR];	//set the current normal time
     bd8:	30 91 47 01 	lds	r19, 0x0147
     bdc:	30 93 84 01 	sts	0x0184, r19
    snooze_time[MINUTE] = normal_time[MINUTE];
     be0:	90 91 46 01 	lds	r25, 0x0146
     be4:	90 93 83 01 	sts	0x0183, r25
    snooze_time[SECOND] = normal_time[SECOND] + 10;	//add 10 seconds 
     be8:	80 91 45 01 	lds	r24, 0x0145
     bec:	86 5f       	subi	r24, 0xF6	; 246
    if(snooze_time[SECOND] >= 60){		//logical to handle rolling over real time
     bee:	8c 33       	cpi	r24, 0x3C	; 60
     bf0:	d8 f0       	brcs	.+54     	; 0xc28 <Snooze+0x50>
	snooze_time[SECOND] = snooze_time[SECOND] % 60;
     bf2:	29 e8       	ldi	r18, 0x89	; 137
     bf4:	82 9f       	mul	r24, r18
     bf6:	21 2d       	mov	r18, r1
     bf8:	11 24       	eor	r1, r1
     bfa:	22 95       	swap	r18
     bfc:	26 95       	lsr	r18
     bfe:	27 70       	andi	r18, 0x07	; 7
     c00:	4c e3       	ldi	r20, 0x3C	; 60
     c02:	24 9f       	mul	r18, r20
     c04:	80 19       	sub	r24, r0
     c06:	11 24       	eor	r1, r1
     c08:	80 93 82 01 	sts	0x0182, r24
	snooze_time[MINUTE]++;
     c0c:	9f 5f       	subi	r25, 0xFF	; 255
	if(snooze_time[MINUTE] == 60){	//correct minute
     c0e:	9c 33       	cpi	r25, 0x3C	; 60
     c10:	19 f0       	breq	.+6      	; 0xc18 <Snooze+0x40>
    snooze_time[HOUR] = normal_time[HOUR];	//set the current normal time
    snooze_time[MINUTE] = normal_time[MINUTE];
    snooze_time[SECOND] = normal_time[SECOND] + 10;	//add 10 seconds 
    if(snooze_time[SECOND] >= 60){		//logical to handle rolling over real time
	snooze_time[SECOND] = snooze_time[SECOND] % 60;
	snooze_time[MINUTE]++;
     c12:	90 93 83 01 	sts	0x0183, r25
     c16:	08 95       	ret
	if(snooze_time[MINUTE] == 60){	//correct minute
	    snooze_time[MINUTE] = 0;
     c18:	10 92 83 01 	sts	0x0183, r1
	    snooze_time[HOUR]++;
     c1c:	3f 5f       	subi	r19, 0xFF	; 255
	    if(snooze_time[HOUR] == 24){	//correct hour
     c1e:	38 31       	cpi	r19, 0x18	; 24
     c20:	31 f0       	breq	.+12     	; 0xc2e <Snooze+0x56>
    if(snooze_time[SECOND] >= 60){		//logical to handle rolling over real time
	snooze_time[SECOND] = snooze_time[SECOND] % 60;
	snooze_time[MINUTE]++;
	if(snooze_time[MINUTE] == 60){	//correct minute
	    snooze_time[MINUTE] = 0;
	    snooze_time[HOUR]++;
     c22:	30 93 84 01 	sts	0x0184, r19
     c26:	08 95       	ret
//if this rolls over, make sure makes logical sense time wise, for example, no 25oclock
//*************************************
void Snooze(){
    snooze_time[HOUR] = normal_time[HOUR];	//set the current normal time
    snooze_time[MINUTE] = normal_time[MINUTE];
    snooze_time[SECOND] = normal_time[SECOND] + 10;	//add 10 seconds 
     c28:	80 93 82 01 	sts	0x0182, r24
     c2c:	08 95       	ret
	snooze_time[MINUTE]++;
	if(snooze_time[MINUTE] == 60){	//correct minute
	    snooze_time[MINUTE] = 0;
	    snooze_time[HOUR]++;
	    if(snooze_time[HOUR] == 24){	//correct hour
		snooze_time[HOUR] = 0;
     c2e:	10 92 84 01 	sts	0x0184, r1
     c32:	08 95       	ret

00000c34 <init_variables>:
//*************************************
//init_variables
//initializes the variables that are global so that they are set to zero initially
//prevents any odd values or states from loading when booted
//*************************************
void init_variables(){
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
    alarm_armed = FALSE;
     c38:	10 92 8b 01 	sts	0x018B, r1
    mode_display = NORMAL;
     c3c:	10 92 38 01 	sts	0x0138, r1
    timer0_counter=0;
     c40:	10 92 7c 01 	sts	0x017C, r1

    normal_time[SECOND] = 0;
     c44:	e5 e4       	ldi	r30, 0x45	; 69
     c46:	f1 e0       	ldi	r31, 0x01	; 1
     c48:	10 82       	st	Z, r1
    normal_time[MINUTE] = 0;
     c4a:	11 82       	std	Z+1, r1	; 0x01
    normal_time[HOUR] = 0;
     c4c:	12 82       	std	Z+2, r1	; 0x02
    normal_time_display[2] = 0b11111111;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	80 93 7f 01 	sts	0x017F, r24
    change_normal_display();
     c54:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <change_normal_display>

    alarm_time[SECOND] = 0;
     c58:	c8 e4       	ldi	r28, 0x48	; 72
     c5a:	d1 e0       	ldi	r29, 0x01	; 1
     c5c:	18 82       	st	Y, r1
    alarm_time[MINUTE] = 0;
     c5e:	19 82       	std	Y+1, r1	; 0x01
    alarm_time[HOUR] = 0;
     c60:	1a 82       	std	Y+2, r1	; 0x02
    alarm_time_display[2] = 0b11111100;
     c62:	8c ef       	ldi	r24, 0xFC	; 252
     c64:	80 93 66 01 	sts	0x0166, r24
    change_alarm_display();
     c68:	0e 94 2e 02 	call	0x45c	; 0x45c <change_alarm_display>

    snooze_time[SECOND] = alarm_time[SECOND];
     c6c:	e2 e8       	ldi	r30, 0x82	; 130
     c6e:	f1 e0       	ldi	r31, 0x01	; 1
     c70:	88 81       	ld	r24, Y
     c72:	80 83       	st	Z, r24
    snooze_time[MINUTE] = alarm_time[MINUTE];
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	81 83       	std	Z+1, r24	; 0x01
    snooze_time[HOUR] = alarm_time[HOUR];
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	82 83       	std	Z+2, r24	; 0x02

    alarm_count=0;
     c7c:	10 92 7b 01 	sts	0x017B, r1
     c80:	10 92 7a 01 	sts	0x017A, r1
    TCCR1A = 0;
     c84:	1f bc       	out	0x2f, r1	; 47
    OCR1A = 0x0160;
     c86:	80 e6       	ldi	r24, 0x60	; 96
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	9b bd       	out	0x2b, r25	; 43
     c8c:	8a bd       	out	0x2a, r24	; 42
    TCCR1B |= (1<<WGM12) | (1<<CS10) | (1<<CS11);
     c8e:	8e b5       	in	r24, 0x2e	; 46
     c90:	8b 60       	ori	r24, 0x0B	; 11
     c92:	8e bd       	out	0x2e, r24	; 46
    TCCR1C = 0x00;
     c94:	10 92 7a 00 	sts	0x007A, r1
    memset(lcd_str_array, '\0', sizeof(lcd_str_array));
     c98:	80 e1       	ldi	r24, 0x10	; 16
     c9a:	e9 e6       	ldi	r30, 0x69	; 105
     c9c:	f1 e0       	ldi	r31, 0x01	; 1
     c9e:	df 01       	movw	r26, r30
     ca0:	1d 92       	st	X+, r1
     ca2:	8a 95       	dec	r24
     ca4:	e9 f7       	brne	.-6      	; 0xca0 <init_variables+0x6c>

    Radio_On = FALSE;
     ca6:	10 92 79 01 	sts	0x0179, r1
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <spi_init>:
//spi_init
//initializes the SPI for use with the LCD display on the Atmega board
//*************************************
void spi_init(void){
    /* Run this code before attempting to write to the LCD.*/
    DDRF  |= 0x08;  //port F bit 3 is enable for LCD
     cb0:	e1 e6       	ldi	r30, 0x61	; 97
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	88 60       	ori	r24, 0x08	; 8
     cb8:	80 83       	st	Z, r24
    PORTF &= 0xF7;  //port F bit 3 is initially low
     cba:	e2 e6       	ldi	r30, 0x62	; 98
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	87 7f       	andi	r24, 0xF7	; 247
     cc2:	80 83       	st	Z, r24

    DDRB  |= 0x07;  //Turn on SS, MOSI, SCLK
     cc4:	87 b3       	in	r24, 0x17	; 23
     cc6:	87 60       	ori	r24, 0x07	; 7
     cc8:	87 bb       	out	0x17, r24	; 23
    PORTB |= _BV(PB1);  //port B initalization for SPI, SS_n off
     cca:	c1 9a       	sbi	0x18, 1	; 24
    //see: /$install_path/avr/include/avr/iom128.h for bit definitions   

    DDRE |= 0b11000000; //sets PORTE to ouput on PIN7 and PIN6 for the decoder on the encoder board
     ccc:	82 b1       	in	r24, 0x02	; 2
     cce:	80 6c       	ori	r24, 0xC0	; 192
     cd0:	82 b9       	out	0x02, r24	; 2
    //Master mode, Clock=clk/4, Cycle half phase, Low polarity, MSB first
    SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
     cd2:	80 e5       	ldi	r24, 0x50	; 80
     cd4:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X);           //SPI at 2x speed (8 MHz)  
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	8e b9       	out	0x0e, r24	; 14
     cda:	08 95       	ret

00000cdc <Init_Radio>:
}
void Init_Radio(){
    //hardware reset of Si4734
    PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
     cdc:	1f 98       	cbi	0x03, 7	; 3
    DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
     cde:	17 9a       	sbi	0x02, 7	; 2
    PORTE |=  (1<<PE2); //hardware reset Si4734 
     ce0:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ce2:	8f e1       	ldi	r24, 0x1F	; 31
     ce4:	93 e0       	ldi	r25, 0x03	; 3
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <Init_Radio+0xa>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <Init_Radio+0x10>
     cec:	00 00       	nop
    _delay_us(200);     //hold for 200us, 100us by spec         
    PORTE &= ~(1<<PE2); //release reset 
     cee:	1a 98       	cbi	0x03, 2	; 3
     cf0:	90 ea       	ldi	r25, 0xA0	; 160
     cf2:	9a 95       	dec	r25
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <Init_Radio+0x16>
    _delay_us(30);      //5us required because of my slow I2C translators I suspect
    //Si code in "low" has 30us delay...no explaination
    DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
     cf6:	17 98       	cbi	0x02, 7	; 2

    EIMSK |= (1<<INT7);
     cf8:	89 b7       	in	r24, 0x39	; 57
     cfa:	80 68       	ori	r24, 0x80	; 128
     cfc:	89 bf       	out	0x39, r24	; 57
    EICRB |=(1<<ISC70);
     cfe:	8a b7       	in	r24, 0x3a	; 58
     d00:	80 64       	ori	r24, 0x40	; 64
     d02:	8a bf       	out	0x3a, r24	; 58
     d04:	08 95       	ret

00000d06 <Get_Input>:
//The main code that does the logic on the push buttons for user interface
//Two modes exist, normal mode and alarm mode
//normal mode allows the user to change time, set the alarm, snooze the alarm, etc
//alarm mode only allows the user to set the alarm time
//*************************************
void Get_Input(){
     d06:	cf 93       	push	r28

    if(chk_buttons()){             //check that button was pressed
     d08:	0e 94 ab 04 	call	0x956	; 0x956 <chk_buttons>
     d0c:	88 23       	and	r24, r24
     d0e:	c9 f0       	breq	.+50     	; 0xd42 <Get_Input+0x3c>
	switch(mode_display){		//two modes, alarm and normal mode
     d10:	80 91 38 01 	lds	r24, 0x0138
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	b9 f0       	breq	.+46     	; 0xd46 <Get_Input+0x40>
     d18:	c8 f1       	brcs	.+114    	; 0xd8c <Get_Input+0x86>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	91 f4       	brne	.+36     	; 0xd42 <Get_Input+0x3c>
		    Sync_Snooze();	//sets the snooze time to be matched with the new alarm time
		    change_alarm_display();	//update 7 seg display
		}
		break;
	    case RADIO:
		if(debounced_state[3] == 1){
     d1e:	80 91 8f 01 	lds	r24, 0x018F
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	09 f4       	brne	.+2      	; 0xd28 <Get_Input+0x22>
     d26:	77 c0       	rjmp	.+238    	; 0xe16 <Get_Input+0x110>
		    change_radio_display();
		    mode_display = NORMAL;
		}
		else if(debounced_state[4] == 1){
     d28:	c0 91 90 01 	lds	r28, 0x0190
     d2c:	c1 30       	cpi	r28, 0x01	; 1
     d2e:	49 f4       	brne	.+18     	; 0xd42 <Get_Input+0x3c>
		    if(Radio_On == FALSE){
     d30:	80 91 79 01 	lds	r24, 0x0179
     d34:	88 23       	and	r24, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <Get_Input+0x34>
     d38:	61 c0       	rjmp	.+194    	; 0xdfc <Get_Input+0xf6>
			OCR3A=0x5000; 
			Change_Radio();
			Radio_On = TRUE;
		    }
		    else{
			radio_pwr_dwn();
     d3a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <radio_pwr_dwn>
			Radio_On = FALSE;
     d3e:	10 92 79 01 	sts	0x0179, r1
		}
		break;
	}
    }

}
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret
		    change_normal_display();	//update 7 seg array 
		}
		break;

	    case ALARM:		//for alarm mode
		if(debounced_state[1] == 1){	//toggle which mode we are in to display on the 7 seg
     d46:	80 91 8d 01 	lds	r24, 0x018D
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <Get_Input+0x4a>
     d4e:	65 c0       	rjmp	.+202    	; 0xe1a <Get_Input+0x114>
		    mode_display ^= 1; 
		}
		else if(debounced_state[6] == 1){	//add an hour button
     d50:	80 91 92 01 	lds	r24, 0x0192
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	09 f4       	brne	.+2      	; 0xd5a <Get_Input+0x54>
     d58:	80 c0       	rjmp	.+256    	; 0xe5a <Get_Input+0x154>
			alarm_time[HOUR] = 0;
		    Sync_Snooze();			//this sets the snooze time to be matched with the new alarm time
		    change_alarm_display();	//update 7 seg display
		}

		else if(debounced_state[7] == 1){	//add a minute button
     d5a:	80 91 93 01 	lds	r24, 0x0193
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	81 f7       	brne	.-32     	; 0xd42 <Get_Input+0x3c>
		    if(alarm_time[MINUTE]<59)
     d62:	80 91 49 01 	lds	r24, 0x0149
     d66:	8b 33       	cpi	r24, 0x3B	; 59
     d68:	08 f0       	brcs	.+2      	; 0xd6c <Get_Input+0x66>
     d6a:	b5 c0       	rjmp	.+362    	; 0xed6 <Get_Input+0x1d0>
			alarm_time[MINUTE]++;
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	80 93 49 01 	sts	0x0149, r24
//Snyc_Snooze function
//Sets the snooze time to be equal to the alarm time
//makes sure that the snooze time matches up with the alarm
//*************************************
void Sync_Snooze(){
    snooze_time[SECOND]=alarm_time[SECOND];    
     d72:	90 91 48 01 	lds	r25, 0x0148
     d76:	90 93 82 01 	sts	0x0182, r25
    snooze_time[MINUTE]=alarm_time[MINUTE];    
     d7a:	80 93 83 01 	sts	0x0183, r24
    snooze_time[HOUR]=alarm_time[HOUR];    
     d7e:	80 91 4a 01 	lds	r24, 0x014A
     d82:	80 93 84 01 	sts	0x0184, r24
		}
		break;
	}
    }

}
     d86:	cf 91       	pop	r28
		    if(alarm_time[MINUTE]<59)
			alarm_time[MINUTE]++;
		    else
			alarm_time[MINUTE] = 0;
		    Sync_Snooze();	//sets the snooze time to be matched with the new alarm time
		    change_alarm_display();	//update 7 seg display
     d88:	0c 94 2e 02 	jmp	0x45c	; 0x45c <change_alarm_display>
void Get_Input(){

    if(chk_buttons()){             //check that button was pressed
	switch(mode_display){		//two modes, alarm and normal mode
	    case NORMAL:
		if(debounced_state[1] == 1){		//this toggles mode of the display
     d8c:	80 91 8d 01 	lds	r24, 0x018D
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	09 f4       	brne	.+2      	; 0xd96 <Get_Input+0x90>
     d94:	48 c0       	rjmp	.+144    	; 0xe26 <Get_Input+0x120>
		    mode_display ^= 1; 	//switches between alarm mode and normal mode display
		}
		else if(debounced_state[2] == 1){	//this is the snooze button
     d96:	80 91 8e 01 	lds	r24, 0x018E
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <Get_Input+0x9a>
     d9e:	46 c0       	rjmp	.+140    	; 0xe2c <Get_Input+0x126>
			Disable_Alarm();	//turn off alarm first 
			Snooze();	//snooze, which sets the snooze time to the right time ahead
			alarm_count=0;	//set the tone back to the initial value
		    }
		}
		else if(debounced_state[0] == 1){	//alarm set button, ie, enables alarm to go off when hits the alarm time
     da0:	c0 91 8c 01 	lds	r28, 0x018C
     da4:	c1 30       	cpi	r28, 0x01	; 1
     da6:	09 f4       	brne	.+2      	; 0xdaa <Get_Input+0xa4>
     da8:	6c c0       	rjmp	.+216    	; 0xe82 <Get_Input+0x17c>
			    alarm_time_display[2] &= ~0b00000100;
			    alarm_armed = TRUE;	//alarm now on
			    break;
		    }
		}
		else if(debounced_state[3] == 1){
     daa:	80 91 8f 01 	lds	r24, 0x018F
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	b9 f1       	breq	.+110    	; 0xe20 <Get_Input+0x11a>
		    change_radio_display();
		    mode_display = RADIO;
		}
		else if(debounced_state[4] == 1){
     db2:	c0 91 90 01 	lds	r28, 0x0190
     db6:	c1 30       	cpi	r28, 0x01	; 1
     db8:	a9 f0       	breq	.+42     	; 0xde4 <Get_Input+0xde>
			Radio_On = FALSE;


		    }
		}
		else if(debounced_state[6] == 1){	//add an hour button
     dba:	80 91 92 01 	lds	r24, 0x0192
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <Get_Input+0xbe>
     dc2:	8d c0       	rjmp	.+282    	; 0xede <Get_Input+0x1d8>
		    else
			normal_time[HOUR] = 0;
		    change_normal_display();	//update 7 seg array 
		}

		else if(debounced_state[7] == 1){	//add a minute button
     dc4:	80 91 93 01 	lds	r24, 0x0193
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	09 f0       	breq	.+2      	; 0xdce <Get_Input+0xc8>
     dcc:	ba cf       	rjmp	.-140    	; 0xd42 <Get_Input+0x3c>
		    if(normal_time[MINUTE]<59)
     dce:	80 91 46 01 	lds	r24, 0x0146
     dd2:	8b 33       	cpi	r24, 0x3B	; 59
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <Get_Input+0xd2>
     dd6:	ae c0       	rjmp	.+348    	; 0xf34 <Get_Input+0x22e>
			normal_time[MINUTE]++;
     dd8:	8f 5f       	subi	r24, 0xFF	; 255
     dda:	80 93 46 01 	sts	0x0146, r24
		}
		break;
	}
    }

}
     dde:	cf 91       	pop	r28
		else if(debounced_state[6] == 1){	//add an hour button
		    if(normal_time[HOUR]<23)
			normal_time[HOUR]++;	//add an hour
		    else
			normal_time[HOUR] = 0;
		    change_normal_display();	//update 7 seg array 
     de0:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <change_normal_display>
		else if(debounced_state[3] == 1){
		    change_radio_display();
		    mode_display = RADIO;
		}
		else if(debounced_state[4] == 1){
		    if(Radio_On == FALSE){
     de4:	80 91 79 01 	lds	r24, 0x0179
     de8:	81 11       	cpse	r24, r1
     dea:	96 c0       	rjmp	.+300    	; 0xf18 <Get_Input+0x212>
			Init_Radio();
     dec:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Init_Radio>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     df0:	8f e9       	ldi	r24, 0x9F	; 159
     df2:	9f e0       	ldi	r25, 0x0F	; 15
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <Get_Input+0xee>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <Get_Input+0xf4>
     dfa:	00 00       	nop
		    change_radio_display();
		    mode_display = NORMAL;
		}
		else if(debounced_state[4] == 1){
		    if(Radio_On == FALSE){
			OCR3A=0x5000; 
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e5       	ldi	r25, 0x50	; 80
     e00:	90 93 87 00 	sts	0x0087, r25
     e04:	80 93 86 00 	sts	0x0086, r24
void Init_Radio();  

uint8_t prev_encoder_state;

void Change_Radio(){
    fm_pwr_up();
     e08:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <fm_pwr_up>
//    _delay_ms(1);
    fm_tune_freq();
     e0c:	0e 94 c8 0b 	call	0x1790	; 0x1790 <fm_tune_freq>
		}
		else if(debounced_state[4] == 1){
		    if(Radio_On == FALSE){
			OCR3A=0x5000; 
			Change_Radio();
			Radio_On = TRUE;
     e10:	c0 93 79 01 	sts	0x0179, r28
     e14:	96 cf       	rjmp	.-212    	; 0xd42 <Get_Input+0x3c>
		    change_alarm_display();	//update 7 seg display
		}
		break;
	    case RADIO:
		if(debounced_state[3] == 1){
		    change_radio_display();
     e16:	0e 94 78 02 	call	0x4f0	; 0x4f0 <change_radio_display>
		    mode_display = NORMAL;
     e1a:	10 92 38 01 	sts	0x0138, r1
     e1e:	91 cf       	rjmp	.-222    	; 0xd42 <Get_Input+0x3c>
			    alarm_armed = TRUE;	//alarm now on
			    break;
		    }
		}
		else if(debounced_state[3] == 1){
		    change_radio_display();
     e20:	0e 94 78 02 	call	0x4f0	; 0x4f0 <change_radio_display>
		    mode_display = RADIO;
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	80 93 38 01 	sts	0x0138, r24
     e2a:	8b cf       	rjmp	.-234    	; 0xd42 <Get_Input+0x3c>
	    case NORMAL:
		if(debounced_state[1] == 1){		//this toggles mode of the display
		    mode_display ^= 1; 	//switches between alarm mode and normal mode display
		}
		else if(debounced_state[2] == 1){	//this is the snooze button
		    if(alarm_on){		//only snoozes if the alarm is currently going off
     e2c:	80 91 63 01 	lds	r24, 0x0163
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <Get_Input+0x130>
     e34:	86 cf       	rjmp	.-244    	; 0xd42 <Get_Input+0x3c>
//Disable Alarm
//turn off the alarm by ignoring the output compare interrupt
//Also turn on or turn off the volume
//*************************************
void Disable_Alarm(){
    OCR3A = 0xFFFF;	//set the volume off by making the PWM always off, prevents static on the speakers
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	90 93 87 00 	sts	0x0087, r25
     e3e:	80 93 86 00 	sts	0x0086, r24
    TIMSK &= ~(1<<OCIE1A);	//turn of the interrupt
     e42:	87 b7       	in	r24, 0x37	; 55
     e44:	8f 7e       	andi	r24, 0xEF	; 239
     e46:	87 bf       	out	0x37, r24	; 55
    alarm_on = FALSE;	//set the state of the alarm
     e48:	10 92 63 01 	sts	0x0163, r1
		    mode_display ^= 1; 	//switches between alarm mode and normal mode display
		}
		else if(debounced_state[2] == 1){	//this is the snooze button
		    if(alarm_on){		//only snoozes if the alarm is currently going off
			Disable_Alarm();	//turn off alarm first 
			Snooze();	//snooze, which sets the snooze time to the right time ahead
     e4c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <Snooze>
			alarm_count=0;	//set the tone back to the initial value
     e50:	10 92 7b 01 	sts	0x017B, r1
     e54:	10 92 7a 01 	sts	0x017A, r1
     e58:	74 cf       	rjmp	.-280    	; 0xd42 <Get_Input+0x3c>
	    case ALARM:		//for alarm mode
		if(debounced_state[1] == 1){	//toggle which mode we are in to display on the 7 seg
		    mode_display ^= 1; 
		}
		else if(debounced_state[6] == 1){	//add an hour button
		    if(alarm_time[HOUR]<23)
     e5a:	80 91 4a 01 	lds	r24, 0x014A
     e5e:	87 31       	cpi	r24, 0x17	; 23
     e60:	b0 f5       	brcc	.+108    	; 0xece <Get_Input+0x1c8>
			alarm_time[HOUR]++;
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	80 93 4a 01 	sts	0x014A, r24
//Snyc_Snooze function
//Sets the snooze time to be equal to the alarm time
//makes sure that the snooze time matches up with the alarm
//*************************************
void Sync_Snooze(){
    snooze_time[SECOND]=alarm_time[SECOND];    
     e68:	90 91 48 01 	lds	r25, 0x0148
     e6c:	90 93 82 01 	sts	0x0182, r25
    snooze_time[MINUTE]=alarm_time[MINUTE];    
     e70:	90 91 49 01 	lds	r25, 0x0149
     e74:	90 93 83 01 	sts	0x0183, r25
    snooze_time[HOUR]=alarm_time[HOUR];    
     e78:	80 93 84 01 	sts	0x0184, r24
		}
		break;
	}
    }

}
     e7c:	cf 91       	pop	r28
		    if(alarm_time[HOUR]<23)
			alarm_time[HOUR]++;
		    else
			alarm_time[HOUR] = 0;
		    Sync_Snooze();			//this sets the snooze time to be matched with the new alarm time
		    change_alarm_display();	//update 7 seg display
     e7e:	0c 94 2e 02 	jmp	0x45c	; 0x45c <change_alarm_display>
			Snooze();	//snooze, which sets the snooze time to the right time ahead
			alarm_count=0;	//set the tone back to the initial value
		    }
		}
		else if(debounced_state[0] == 1){	//alarm set button, ie, enables alarm to go off when hits the alarm time
		    switch(alarm_armed){	//for toggling alarm
     e82:	80 91 8b 01 	lds	r24, 0x018B
     e86:	88 23       	and	r24, r24
     e88:	91 f1       	breq	.+100    	; 0xeee <Get_Input+0x1e8>
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	09 f0       	breq	.+2      	; 0xe90 <Get_Input+0x18a>
     e8e:	59 cf       	rjmp	.-334    	; 0xd42 <Get_Input+0x3c>
			case TRUE:		//if alarm was alread armed
			    set_cursor(1,0);
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	0e 94 0e 08 	call	0x101c	; 0x101c <set_cursor>
			    string2lcd("          ");	//set the LCD to read armed alarm
     e96:	84 e0       	ldi	r24, 0x04	; 4
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 b2 08 	call	0x1164	; 0x1164 <string2lcd>
//Disable Alarm
//turn off the alarm by ignoring the output compare interrupt
//Also turn on or turn off the volume
//*************************************
void Disable_Alarm(){
    OCR3A = 0xFFFF;	//set the volume off by making the PWM always off, prevents static on the speakers
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	9f ef       	ldi	r25, 0xFF	; 255
     ea2:	90 93 87 00 	sts	0x0087, r25
     ea6:	80 93 86 00 	sts	0x0086, r24
    TIMSK &= ~(1<<OCIE1A);	//turn of the interrupt
     eaa:	87 b7       	in	r24, 0x37	; 55
     eac:	8f 7e       	andi	r24, 0xEF	; 239
     eae:	87 bf       	out	0x37, r24	; 55
    alarm_on = FALSE;	//set the state of the alarm
     eb0:	10 92 63 01 	sts	0x0163, r1
		    switch(alarm_armed){	//for toggling alarm
			case TRUE:		//if alarm was alread armed
			    set_cursor(1,0);
			    string2lcd("          ");	//set the LCD to read armed alarm
			    Disable_Alarm();	//turn off the alarm if its going off
			    normal_time_display[2] |= 0b00000100;	//change the alarm indication on the 7 seg
     eb4:	80 91 7f 01 	lds	r24, 0x017F
     eb8:	84 60       	ori	r24, 0x04	; 4
     eba:	80 93 7f 01 	sts	0x017F, r24
			    alarm_time_display[2] |= 0b00000100;	//do for both alarm and normal mode dislay
     ebe:	80 91 66 01 	lds	r24, 0x0166
     ec2:	84 60       	ori	r24, 0x04	; 4
     ec4:	80 93 66 01 	sts	0x0166, r24
			    alarm_armed = FALSE;	//set the state
     ec8:	10 92 8b 01 	sts	0x018B, r1
     ecc:	3a cf       	rjmp	.-396    	; 0xd42 <Get_Input+0x3c>
		}
		else if(debounced_state[6] == 1){	//add an hour button
		    if(alarm_time[HOUR]<23)
			alarm_time[HOUR]++;
		    else
			alarm_time[HOUR] = 0;
     ece:	10 92 4a 01 	sts	0x014A, r1
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	c9 cf       	rjmp	.-110    	; 0xe68 <Get_Input+0x162>

		else if(debounced_state[7] == 1){	//add a minute button
		    if(alarm_time[MINUTE]<59)
			alarm_time[MINUTE]++;
		    else
			alarm_time[MINUTE] = 0;
     ed6:	10 92 49 01 	sts	0x0149, r1
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	4a cf       	rjmp	.-364    	; 0xd72 <Get_Input+0x6c>


		    }
		}
		else if(debounced_state[6] == 1){	//add an hour button
		    if(normal_time[HOUR]<23)
     ede:	80 91 47 01 	lds	r24, 0x0147
     ee2:	87 31       	cpi	r24, 0x17	; 23
     ee4:	20 f5       	brcc	.+72     	; 0xf2e <Get_Input+0x228>
			normal_time[HOUR]++;	//add an hour
     ee6:	8f 5f       	subi	r24, 0xFF	; 255
     ee8:	80 93 47 01 	sts	0x0147, r24
     eec:	78 cf       	rjmp	.-272    	; 0xdde <Get_Input+0xd8>
			    normal_time_display[2] |= 0b00000100;	//change the alarm indication on the 7 seg
			    alarm_time_display[2] |= 0b00000100;	//do for both alarm and normal mode dislay
			    alarm_armed = FALSE;	//set the state
			    break;
			case FALSE:	//if alarm isn't armed yet
			    set_cursor(1,0);
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	0e 94 0e 08 	call	0x101c	; 0x101c <set_cursor>
			    string2lcd(" Alarm set");	//set the LCD to read armed alarm
     ef6:	8f e0       	ldi	r24, 0x0F	; 15
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 b2 08 	call	0x1164	; 0x1164 <string2lcd>
			    normal_time_display[2] &= ~0b00000100;	//toggle the alarm to be indicated on the 7 seg
     efe:	80 91 7f 01 	lds	r24, 0x017F
     f02:	8b 7f       	andi	r24, 0xFB	; 251
     f04:	80 93 7f 01 	sts	0x017F, r24
			    alarm_time_display[2] &= ~0b00000100;
     f08:	80 91 66 01 	lds	r24, 0x0166
     f0c:	8b 7f       	andi	r24, 0xFB	; 251
     f0e:	80 93 66 01 	sts	0x0166, r24
			    alarm_armed = TRUE;	//alarm now on
     f12:	c0 93 8b 01 	sts	0x018B, r28
     f16:	15 cf       	rjmp	.-470    	; 0xd42 <Get_Input+0x3c>
			OCR3A=0x5000; 
			Change_Radio();
			Radio_On = TRUE;
		    }
		    else{
			OCR3A = 0xF000;
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 ef       	ldi	r25, 0xF0	; 240
     f1c:	90 93 87 00 	sts	0x0087, r25
     f20:	80 93 86 00 	sts	0x0086, r24
			radio_pwr_dwn();
     f24:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <radio_pwr_dwn>
			Radio_On = FALSE;
     f28:	10 92 79 01 	sts	0x0179, r1
     f2c:	0a cf       	rjmp	.-492    	; 0xd42 <Get_Input+0x3c>
		}
		else if(debounced_state[6] == 1){	//add an hour button
		    if(normal_time[HOUR]<23)
			normal_time[HOUR]++;	//add an hour
		    else
			normal_time[HOUR] = 0;
     f2e:	10 92 47 01 	sts	0x0147, r1
     f32:	55 cf       	rjmp	.-342    	; 0xdde <Get_Input+0xd8>

		else if(debounced_state[7] == 1){	//add a minute button
		    if(normal_time[MINUTE]<59)
			normal_time[MINUTE]++;
		    else
			normal_time[MINUTE] = 0;
     f34:	10 92 46 01 	sts	0x0146, r1
     f38:	52 cf       	rjmp	.-348    	; 0xdde <Get_Input+0xd8>

00000f3a <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	81 11       	cpse	r24, r1
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <send_lcd+0x8>
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f44:	77 9b       	sbis	0x0e, 7	; 14
     f46:	fe cf       	rjmp	.-4      	; 0xf44 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     f48:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f4a:	77 9b       	sbis	0x0e, 7	; 14
     f4c:	fe cf       	rjmp	.-4      	; 0xf4a <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f4e:	80 91 62 00 	lds	r24, 0x0062
     f52:	88 60       	ori	r24, 0x08	; 8
     f54:	80 93 62 00 	sts	0x0062, r24
     f58:	80 91 62 00 	lds	r24, 0x0062
     f5c:	87 7f       	andi	r24, 0xF7	; 247
     f5e:	80 93 62 00 	sts	0x0062, r24
     f62:	08 95       	ret

00000f64 <refresh_lcd>:
//  |  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11| 12| 13| 14| 15| 
//  -----------------------------------------------------------------
//  | 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31|  
//  -----------------------------------------------------------------
//
void refresh_lcd(char lcd_string_array[]) {
     f64:	cf 93       	push	r28

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     f66:	c0 91 33 01 	lds	r28, 0x0133
     f6a:	8c 0f       	add	r24, r28
     f6c:	91 1d       	adc	r25, r1
     f6e:	fc 01       	movw	r30, r24
     f70:	60 81       	ld	r22, Z
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
 i++;   //increment to next character
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	8c 0f       	add	r24, r28
     f7c:	80 93 33 01 	sts	0x0133, r24
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     f80:	80 31       	cpi	r24, 0x10	; 16
     f82:	81 f0       	breq	.+32     	; 0xfa4 <refresh_lcd+0x40>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     f84:	80 32       	cpi	r24, 0x20	; 32
     f86:	11 f0       	breq	.+4      	; 0xf8c <refresh_lcd+0x28>
}//refresh_lcd
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f8c:	85 ed       	ldi	r24, 0xD5	; 213
     f8e:	8a 95       	dec	r24
     f90:	f1 f7       	brne	.-4      	; 0xf8e <refresh_lcd+0x2a>
     f92:	00 00       	nop
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
     f94:	60 e8       	ldi	r22, 0x80	; 128
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     f9c:	10 92 33 01 	sts	0x0133, r1
}//refresh_lcd
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret
     fa4:	f5 ed       	ldi	r31, 0xD5	; 213
     fa6:	fa 95       	dec	r31
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <refresh_lcd+0x42>
     faa:	00 00       	nop
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
     fac:	60 ec       	ldi	r22, 0xC0	; 192
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
     fb4:	80 91 33 01 	lds	r24, 0x0133
     fb8:	e5 cf       	rjmp	.-54     	; 0xf84 <refresh_lcd+0x20>

00000fba <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	1f 92       	push	r1
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	18 2f       	mov	r17, r24
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     fce:	66 0f       	add	r22, r22
     fd0:	66 0f       	add	r22, r22
     fd2:	66 0f       	add	r22, r22
     fd4:	60 5c       	subi	r22, 0xC0	; 192
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	99 83       	std	Y+1, r25	; 0x01
     fda:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
     fde:	85 ed       	ldi	r24, 0xD5	; 213
     fe0:	8a 95       	dec	r24
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <set_custom_character+0x26>
     fe4:	00 00       	nop
     fe6:	e1 2e       	mov	r14, r17
     fe8:	99 81       	ldd	r25, Y+1	; 0x01
     fea:	f9 2e       	mov	r15, r25
     fec:	87 01       	movw	r16, r14
     fee:	08 5f       	subi	r16, 0xF8	; 248
     ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     ff2:	f7 01       	movw	r30, r14
     ff4:	61 91       	ld	r22, Z+
     ff6:	7f 01       	movw	r14, r30
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
     ffe:	f5 ed       	ldi	r31, 0xD5	; 213
    1000:	fa 95       	dec	r31
    1002:	f1 f7       	brne	.-4      	; 0x1000 <set_custom_character+0x46>
    1004:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
    1006:	e0 16       	cp	r14, r16
    1008:	f1 06       	cpc	r15, r17
    100a:	99 f7       	brne	.-26     	; 0xff2 <set_custom_character+0x38>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
    100c:	0f 90       	pop	r0
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	08 95       	ret

0000101c <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
    101c:	90 e4       	ldi	r25, 0x40	; 64
    101e:	89 9f       	mul	r24, r25
    1020:	60 0d       	add	r22, r0
    1022:	11 24       	eor	r1, r1
    1024:	60 5c       	subi	r22, 0xC0	; 192
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

0000102c <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    102c:	cf 93       	push	r28
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    102e:	88 23       	and	r24, r24
    1030:	b9 f1       	breq	.+110    	; 0x10a0 <uint2lcd+0x74>
    1032:	c8 2f       	mov	r28, r24
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    1034:	84 36       	cpi	r24, 0x64	; 100
    1036:	98 f4       	brcc	.+38     	; 0x105e <uint2lcd+0x32>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1038:	8a 30       	cpi	r24, 0x0A	; 10
    103a:	d8 f4       	brcc	.+54     	; 0x1072 <uint2lcd+0x46>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    103c:	8d ec       	ldi	r24, 0xCD	; 205
    103e:	c8 9f       	mul	r28, r24
    1040:	81 2d       	mov	r24, r1
    1042:	11 24       	eor	r1, r1
    1044:	86 95       	lsr	r24
    1046:	86 95       	lsr	r24
    1048:	86 95       	lsr	r24
    104a:	6c 2f       	mov	r22, r28
    104c:	2a e0       	ldi	r18, 0x0A	; 10
    104e:	82 9f       	mul	r24, r18
    1050:	60 19       	sub	r22, r0
    1052:	11 24       	eor	r1, r1
    1054:	60 5d       	subi	r22, 0xD0	; 208
    1056:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    1058:	cf 91       	pop	r28
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    105a:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
    105e:	69 e2       	ldi	r22, 0x29	; 41
    1060:	86 9f       	mul	r24, r22
    1062:	61 2d       	mov	r22, r1
    1064:	11 24       	eor	r1, r1
    1066:	62 95       	swap	r22
    1068:	6f 70       	andi	r22, 0x0F	; 15
    106a:	60 5d       	subi	r22, 0xD0	; 208
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
    1072:	89 e2       	ldi	r24, 0x29	; 41
    1074:	c8 9f       	mul	r28, r24
    1076:	81 2d       	mov	r24, r1
    1078:	11 24       	eor	r1, r1
    107a:	82 95       	swap	r24
    107c:	8f 70       	andi	r24, 0x0F	; 15
    107e:	9c 2f       	mov	r25, r28
    1080:	24 e6       	ldi	r18, 0x64	; 100
    1082:	82 9f       	mul	r24, r18
    1084:	90 19       	sub	r25, r0
    1086:	11 24       	eor	r1, r1
    1088:	6d ec       	ldi	r22, 0xCD	; 205
    108a:	96 9f       	mul	r25, r22
    108c:	61 2d       	mov	r22, r1
    108e:	11 24       	eor	r1, r1
    1090:	66 95       	lsr	r22
    1092:	66 95       	lsr	r22
    1094:	66 95       	lsr	r22
    1096:	60 5d       	subi	r22, 0xD0	; 208
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    109e:	ce cf       	rjmp	.-100    	; 0x103c <uint2lcd+0x10>
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    10a0:	60 e3       	ldi	r22, 0x30	; 48
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
    }
}
    10a4:	cf 91       	pop	r28
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    10a6:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

000010aa <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    10aa:	cf 93       	push	r28
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    10ac:	87 fd       	sbrc	r24, 7
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <int2lcd+0xc>
    else          {uint2lcd(number);                                            }
}
    10b0:	cf 91       	pop	r28
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    else          {uint2lcd(number);                                            }
    10b2:	0c 94 16 08 	jmp	0x102c	; 0x102c <uint2lcd>
    10b6:	c8 2f       	mov	r28, r24
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    10b8:	6d e2       	ldi	r22, 0x2D	; 45
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    10c0:	85 ed       	ldi	r24, 0xD5	; 213
    10c2:	8a 95       	dec	r24
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <int2lcd+0x18>
    10c6:	00 00       	nop
    10c8:	8c 2f       	mov	r24, r28
    10ca:	81 95       	neg	r24
    else          {uint2lcd(number);                                            }
}
    10cc:	cf 91       	pop	r28
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
    10ce:	0c 94 16 08 	jmp	0x102c	; 0x102c <uint2lcd>

000010d2 <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E);}
    10d2:	6e e0       	ldi	r22, 0x0E	; 14
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

000010da <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C);}
    10da:	6c e0       	ldi	r22, 0x0C	; 12
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

000010e2 <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E);}
    10e2:	6e e1       	ldi	r22, 0x1E	; 30
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

000010ea <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18);}
    10ea:	68 e1       	ldi	r22, 0x18	; 24
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

000010f2 <strobe_lcd>:
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    10f2:	e2 e6       	ldi	r30, 0x62	; 98
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 60       	ori	r24, 0x08	; 8
    10fa:	80 83       	st	Z, r24
    10fc:	80 81       	ld	r24, Z
    10fe:	87 7f       	andi	r24, 0xF7	; 247
    1100:	80 83       	st	Z, r24
    1102:	08 95       	ret

00001104 <clear_display>:
//
//Clears entire display and sets DDRAM address 0 in address counter. Requires
//1.8ms for execution. Use only if you can withstand the big delay.
//
void clear_display(void){
  send_lcd(CMD_BYTE, CLEAR_DISPLAY);
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    110c:	8f e1       	ldi	r24, 0x1F	; 31
    110e:	9c e1       	ldi	r25, 0x1C	; 28
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <clear_display+0xc>
    1114:	00 c0       	rjmp	.+0      	; 0x1116 <clear_display+0x12>
    1116:	00 00       	nop
    1118:	08 95       	ret

0000111a <cursor_home>:
//shifted to original position.  DDRAM contents remain unchanged. Requires
//1.5ms to execute. Use only if you can withstand the big delay. Consider
//using line1_col1().
//
void cursor_home(void){
  send_lcd(CMD_BYTE, RETURN_HOME);
    111a:	62 e0       	ldi	r22, 0x02	; 2
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    1122:	8f e6       	ldi	r24, 0x6F	; 111
    1124:	97 e1       	ldi	r25, 0x17	; 23
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <cursor_home+0xc>
    112a:	00 c0       	rjmp	.+0      	; 0x112c <cursor_home+0x12>
    112c:	00 00       	nop
    112e:	08 95       	ret

00001130 <line2_col1>:
//Put cursor at line 2, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line2_col1(void){                           
  //change DDRAM address to 40, first char in second row, executes in 37us
  send_lcd(CMD_BYTE, (SET_DDRAM_ADDR | 0x40));
    1130:	60 ec       	ldi	r22, 0xC0	; 192
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

00001138 <line1_col1>:
//Put cursor at line 1, column 0 by directly maniuplating the DDRAM address
//pointer. 37us required for execution.
//
void line1_col1(void){
  //change DDRAM address to 0, first char in first row, executes in 37us
  send_lcd(CMD_BYTE,(SET_DDRAM_ADDR | 0x00));
    1138:	60 e8       	ldi	r22, 0x80	; 128
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

00001140 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
    1140:	cf 93       	push	r28
    1142:	c0 e1       	ldi	r28, 0x10	; 16
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
		send_lcd(CHAR_BYTE, ' '); 
    1144:	60 e2       	ldi	r22, 0x20	; 32
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    114c:	85 ed       	ldi	r24, 0xD5	; 213
    114e:	8a 95       	dec	r24
    1150:	f1 f7       	brne	.-4      	; 0x114e <fill_spaces+0xe>
    1152:	00 00       	nop
    1154:	c1 50       	subi	r28, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
    1156:	b1 f7       	brne	.-20     	; 0x1144 <fill_spaces+0x4>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <char2lcd>:
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
//
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char);} 
    115c:	68 2f       	mov	r22, r24
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <send_lcd>

00001164 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	8c 01       	movw	r16, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	c0 e0       	ldi	r28, 0x00	; 0
    1172:	f8 01       	movw	r30, r16
    1174:	e4 0f       	add	r30, r20
    1176:	f5 1f       	adc	r31, r21
    1178:	60 81       	ld	r22, Z
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    1180:	85 ed       	ldi	r24, 0xD5	; 213
    1182:	8a 95       	dec	r24
    1184:	f1 f7       	brne	.-4      	; 0x1182 <string2lcd+0x1e>
    1186:	00 00       	nop
    1188:	cf 5f       	subi	r28, 0xFF	; 255
    118a:	4c 2f       	mov	r20, r28
    118c:	50 e0       	ldi	r21, 0x00	; 0
    118e:	f8 01       	movw	r30, r16
    1190:	01 90       	ld	r0, Z+
    1192:	00 20       	and	r0, r0
    1194:	e9 f7       	brne	.-6      	; 0x1190 <string2lcd+0x2c>
    1196:	9f 01       	movw	r18, r30
    1198:	20 1b       	sub	r18, r16
    119a:	31 0b       	sbc	r19, r17
    119c:	22 50       	subi	r18, 0x02	; 2
    119e:	31 09       	sbc	r19, r1
    11a0:	24 17       	cp	r18, r20
    11a2:	35 07       	cpc	r19, r21
    11a4:	30 f7       	brcc	.-52     	; 0x1172 <string2lcd+0xe>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	08 95       	ret

000011ae <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	99 ef       	ldi	r25, 0xF9	; 249
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <lcd_init+0x4>
    11b6:	00 c0       	rjmp	.+0      	; 0x11b8 <lcd_init+0xa>
    11b8:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
    11ba:	88 e0       	ldi	r24, 0x08	; 8
    11bc:	80 93 61 00 	sts	0x0061, r24
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7); //send cmd sequence 3 times 
    11c0:	60 e3       	ldi	r22, 0x30	; 48
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    11c8:	8f e5       	ldi	r24, 0x5F	; 95
    11ca:	9d e6       	ldi	r25, 0x6D	; 109
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <lcd_init+0x1e>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <lcd_init+0x24>
    11d2:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    11d4:	60 e3       	ldi	r22, 0x30	; 48
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    11dc:	8f e5       	ldi	r24, 0x5F	; 95
    11de:	9d e6       	ldi	r25, 0x6D	; 109
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <lcd_init+0x32>
    11e4:	00 c0       	rjmp	.+0      	; 0x11e6 <lcd_init+0x38>
    11e6:	00 00       	nop
  send_lcd(CMD_BYTE, 0x30); _delay_ms(7);
    11e8:	60 e3       	ldi	r22, 0x30	; 48
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    11f0:	8f e5       	ldi	r24, 0x5F	; 95
    11f2:	9d e6       	ldi	r25, 0x6D	; 109
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <lcd_init+0x46>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <lcd_init+0x4c>
    11fa:	00 00       	nop
  send_lcd(CMD_BYTE, 0x38); _delay_ms(5);
    11fc:	68 e3       	ldi	r22, 0x38	; 56
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    1204:	8f e1       	ldi	r24, 0x1F	; 31
    1206:	9e e4       	ldi	r25, 0x4E	; 78
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <lcd_init+0x5a>
    120c:	00 c0       	rjmp	.+0      	; 0x120e <lcd_init+0x60>
    120e:	00 00       	nop
  send_lcd(CMD_BYTE, 0x08); _delay_ms(5);
    1210:	68 e0       	ldi	r22, 0x08	; 8
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    1218:	8f e1       	ldi	r24, 0x1F	; 31
    121a:	9e e4       	ldi	r25, 0x4E	; 78
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <lcd_init+0x6e>
    1220:	00 c0       	rjmp	.+0      	; 0x1222 <lcd_init+0x74>
    1222:	00 00       	nop
  send_lcd(CMD_BYTE, 0x01); _delay_ms(5);
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    122c:	8f e1       	ldi	r24, 0x1F	; 31
    122e:	9e e4       	ldi	r25, 0x4E	; 78
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <lcd_init+0x82>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <lcd_init+0x88>
    1236:	00 00       	nop
  send_lcd(CMD_BYTE, 0x06); _delay_ms(5);
    1238:	66 e0       	ldi	r22, 0x06	; 6
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    1240:	8f e1       	ldi	r24, 0x1F	; 31
    1242:	9e e4       	ldi	r25, 0x4E	; 78
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <lcd_init+0x96>
    1248:	00 c0       	rjmp	.+0      	; 0x124a <lcd_init+0x9c>
    124a:	00 00       	nop
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK); _delay_ms(5);
    124c:	6c e0       	ldi	r22, 0x0C	; 12
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    1254:	8f e1       	ldi	r24, 0x1F	; 31
    1256:	9e e4       	ldi	r25, 0x4E	; 78
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <lcd_init+0xaa>
    125c:	00 c0       	rjmp	.+0      	; 0x125e <lcd_init+0xb0>
    125e:	00 00       	nop
    1260:	08 95       	ret

00001262 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
    1262:	8f 92       	push	r8
    1264:	9f 92       	push	r9
    1266:	af 92       	push	r10
    1268:	bf 92       	push	r11
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	69 97       	sbiw	r28, 0x19	; 25
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	f4 2e       	mov	r15, r20
    128c:	12 2f       	mov	r17, r18
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
    128e:	00 23       	and	r16, r16
    1290:	59 f0       	breq	.+22     	; 0x12a8 <lcd_int32+0x46>
        bSigned = (qr.quot<0);
    1292:	4b 01       	movw	r8, r22
    1294:	5c 01       	movw	r10, r24
    1296:	88 24       	eor	r8, r8
    1298:	b7 fc       	sbrc	r11, 7
    129a:	83 94       	inc	r8
    129c:	99 24       	eor	r9, r9
    129e:	aa 24       	eor	r10, r10
    12a0:	bb 24       	eor	r11, r11
    12a2:	08 2d       	mov	r16, r8
        qr.quot = labs(qr.quot);
    12a4:	97 fd       	sbrc	r25, 7
    12a6:	8f c0       	rjmp	.+286    	; 0x13c6 <lcd_int32+0x164>
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
    12a8:	11 23       	and	r17, r17
    12aa:	09 f4       	brne	.+2      	; 0x12ae <lcd_int32+0x4c>
    12ac:	84 c0       	rjmp	.+264    	; 0x13b6 <lcd_int32+0x154>
    12ae:	9e 01       	movw	r18, r28
    12b0:	2f 5f       	subi	r18, 0xFF	; 255
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	69 01       	movw	r12, r18
    12b6:	59 01       	movw	r10, r18
    12b8:	88 24       	eor	r8, r8
    12ba:	8a 94       	dec	r8
    12bc:	81 0e       	add	r8, r17
    12be:	91 2c       	mov	r9, r1
    12c0:	3f ef       	ldi	r19, 0xFF	; 255
    12c2:	83 1a       	sub	r8, r19
    12c4:	93 0a       	sbc	r9, r19
    12c6:	8c 0c       	add	r8, r12
    12c8:	9d 1c       	adc	r9, r13
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
    12ca:	2a e0       	ldi	r18, 0x0A	; 10
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__divmodsi4>
    12d6:	e6 2f       	mov	r30, r22
    12d8:	2a 8b       	std	Y+18, r18	; 0x12
    12da:	3b 8b       	std	Y+19, r19	; 0x13
    12dc:	4c 8b       	std	Y+20, r20	; 0x14
    12de:	5d 8b       	std	Y+21, r21	; 0x15
    12e0:	6a 89       	ldd	r22, Y+18	; 0x12
    12e2:	7b 89       	ldd	r23, Y+19	; 0x13
    12e4:	8c 89       	ldd	r24, Y+20	; 0x14
    12e6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    12e8:	20 e3       	ldi	r18, 0x30	; 48
    12ea:	2e 0f       	add	r18, r30
    12ec:	f5 01       	movw	r30, r10
    12ee:	21 93       	st	Z+, r18
    12f0:	5f 01       	movw	r10, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
    12f2:	e8 15       	cp	r30, r8
    12f4:	f9 05       	cpc	r31, r9
    12f6:	49 f7       	brne	.-46     	; 0x12ca <lcd_int32+0x68>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
    12f8:	bb 24       	eor	r11, r11
    12fa:	b3 94       	inc	r11
    12fc:	b1 0e       	add	r11, r17
    12fe:	f6 01       	movw	r30, r12
    1300:	e1 0f       	add	r30, r17
    1302:	f1 1d       	adc	r31, r1
    1304:	2e e2       	ldi	r18, 0x2E	; 46
    1306:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
    1308:	2a e0       	ldi	r18, 0x0A	; 10
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__divmodsi4>
    1314:	e6 2f       	mov	r30, r22
    1316:	2a 8b       	std	Y+18, r18	; 0x12
    1318:	3b 8b       	std	Y+19, r19	; 0x13
    131a:	4c 8b       	std	Y+20, r20	; 0x14
    131c:	5d 8b       	std	Y+21, r21	; 0x15
    131e:	6e 8b       	std	Y+22, r22	; 0x16
    1320:	7f 8b       	std	Y+23, r23	; 0x17
    1322:	88 8f       	std	Y+24, r24	; 0x18
    1324:	99 8f       	std	Y+25, r25	; 0x19
    1326:	6a 89       	ldd	r22, Y+18	; 0x12
    1328:	7b 89       	ldd	r23, Y+19	; 0x13
    132a:	8c 89       	ldd	r24, Y+20	; 0x14
    132c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
    132e:	11 e0       	ldi	r17, 0x01	; 1
    1330:	1b 0d       	add	r17, r11
    1332:	d6 01       	movw	r26, r12
    1334:	ab 0d       	add	r26, r11
    1336:	b1 1d       	adc	r27, r1
    1338:	e0 5d       	subi	r30, 0xD0	; 208
    133a:	ec 93       	st	X, r30
    133c:	b1 2e       	mov	r11, r17
        }while(qr.quot);
    133e:	61 15       	cp	r22, r1
    1340:	71 05       	cpc	r23, r1
    1342:	81 05       	cpc	r24, r1
    1344:	91 05       	cpc	r25, r1
    1346:	01 f7       	brne	.-64     	; 0x1308 <lcd_int32+0xa6>

      // fill the whole field if a width was specified
      if (fieldwidth){
    1348:	ff 20       	and	r15, r15
    134a:	61 f0       	breq	.+24     	; 0x1364 <lcd_int32+0x102>
        fillch = bZeroFill? '0': ' '; // determine the fill character
    134c:	e1 10       	cpse	r14, r1
    134e:	39 c0       	rjmp	.+114    	; 0x13c2 <lcd_int32+0x160>
    1350:	80 e2       	ldi	r24, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
    1352:	1f 15       	cp	r17, r15
    1354:	38 f4       	brcc	.+14     	; 0x1364 <lcd_int32+0x102>
    1356:	f6 01       	movw	r30, r12
    1358:	e1 0f       	add	r30, r17
    135a:	f1 1d       	adc	r31, r1
    135c:	80 83       	st	Z, r24
    135e:	1f 5f       	subi	r17, 0xFF	; 255
    1360:	1f 11       	cpse	r17, r15
    1362:	f9 cf       	rjmp	.-14     	; 0x1356 <lcd_int32+0xf4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
    1364:	00 23       	and	r16, r16
    1366:	31 f0       	breq	.+12     	; 0x1374 <lcd_int32+0x112>
    1368:	f6 01       	movw	r30, r12
    136a:	e1 0f       	add	r30, r17
    136c:	f1 1d       	adc	r31, r1
    136e:	8d e2       	ldi	r24, 0x2D	; 45
    1370:	80 83       	st	Z, r24
    1372:	1f 5f       	subi	r17, 0xFF	; 255

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1374:	11 50       	subi	r17, 0x01	; 1
    1376:	f6 01       	movw	r30, r12
    1378:	e1 0f       	add	r30, r17
    137a:	f1 1d       	adc	r31, r1
    137c:	60 81       	ld	r22, Z
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1384:	35 ed       	ldi	r19, 0xD5	; 213
    1386:	3a 95       	dec	r19
    1388:	f1 f7       	brne	.-4      	; 0x1386 <lcd_int32+0x124>
    138a:	00 00       	nop
    138c:	11 11       	cpse	r17, r1
    138e:	f2 cf       	rjmp	.-28     	; 0x1374 <lcd_int32+0x112>

}
    1390:	69 96       	adiw	r28, 0x19	; 25
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	df 90       	pop	r13
    13aa:	cf 90       	pop	r12
    13ac:	bf 90       	pop	r11
    13ae:	af 90       	pop	r10
    13b0:	9f 90       	pop	r9
    13b2:	8f 90       	pop	r8
    13b4:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
    13b6:	b1 2c       	mov	r11, r1
    13b8:	9e 01       	movw	r18, r28
    13ba:	2f 5f       	subi	r18, 0xFF	; 255
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	69 01       	movw	r12, r18
    13c0:	a3 cf       	rjmp	.-186    	; 0x1308 <lcd_int32+0xa6>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
    13c2:	80 e3       	ldi	r24, 0x30	; 48
    13c4:	c6 cf       	rjmp	.-116    	; 0x1352 <lcd_int32+0xf0>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
    13c6:	90 95       	com	r25
    13c8:	80 95       	com	r24
    13ca:	70 95       	com	r23
    13cc:	61 95       	neg	r22
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	8f 4f       	sbci	r24, 0xFF	; 255
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	69 cf       	rjmp	.-302    	; 0x12a8 <lcd_int32+0x46>

000013d6 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
    13d6:	5f 92       	push	r5
    13d8:	6f 92       	push	r6
    13da:	7f 92       	push	r7
    13dc:	8f 92       	push	r8
    13de:	9f 92       	push	r9
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	61 97       	sbiw	r28, 0x11	; 17
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	a6 2e       	mov	r10, r22
    1406:	54 2e       	mov	r5, r20
    1408:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
    140a:	79 2e       	mov	r7, r25
    140c:	77 1c       	adc	r7, r7
    140e:	77 24       	eor	r7, r7
    1410:	77 1c       	adc	r7, r7
    1412:	b7 2c       	mov	r11, r7
    1414:	c7 2c       	mov	r12, r7
    1416:	d1 2c       	mov	r13, r1
    1418:	ee 27       	eor	r30, r30
    141a:	ff 27       	eor	r31, r31
    141c:	ec 19       	sub	r30, r12
    141e:	fd 09       	sbc	r31, r13
    1420:	8e 27       	eor	r24, r30
    1422:	9f 27       	eor	r25, r31
    1424:	fc 01       	movw	r30, r24
    1426:	ec 0d       	add	r30, r12
    1428:	fd 1d       	adc	r31, r13
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
    142a:	44 23       	and	r20, r20
    142c:	09 f4       	brne	.+2      	; 0x1430 <lcd_int16+0x5a>
    142e:	8e c0       	rjmp	.+284    	; 0x154c <lcd_int16+0x176>
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	7c 01       	movw	r14, r24
    1436:	8c 01       	movw	r16, r24
    1438:	88 24       	eor	r8, r8
    143a:	8a 94       	dec	r8
    143c:	84 0e       	add	r8, r20
    143e:	91 2c       	mov	r9, r1
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	89 1a       	sub	r8, r25
    1444:	99 0a       	sbc	r9, r25
    1446:	8e 0c       	add	r8, r14
    1448:	9f 1c       	adc	r9, r15
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
    144a:	6a e0       	ldi	r22, 0x0A	; 10
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	cf 01       	movw	r24, r30
    1450:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__divmodhi4>
    1454:	26 2f       	mov	r18, r22
    1456:	e2 2f       	mov	r30, r18
    1458:	f7 2f       	mov	r31, r23
            sline[i++] = qr.rem + '0';
    145a:	80 5d       	subi	r24, 0xD0	; 208
    145c:	d8 01       	movw	r26, r16
    145e:	8d 93       	st	X+, r24
    1460:	8d 01       	movw	r16, r26
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
    1462:	a8 15       	cp	r26, r8
    1464:	b9 05       	cpc	r27, r9
    1466:	89 f7       	brne	.-30     	; 0x144a <lcd_int16+0x74>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
    1468:	01 e0       	ldi	r16, 0x01	; 1
    146a:	05 0d       	add	r16, r5
    146c:	d7 01       	movw	r26, r14
    146e:	a5 0d       	add	r26, r5
    1470:	b1 1d       	adc	r27, r1
    1472:	8e e2       	ldi	r24, 0x2E	; 46
    1474:	8c 93       	st	X, r24
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
    1476:	6a e0       	ldi	r22, 0x0A	; 10
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	cf 01       	movw	r24, r30
    147c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <__divmodhi4>
    1480:	26 2f       	mov	r18, r22
    1482:	e2 2f       	mov	r30, r18
    1484:	f7 2f       	mov	r31, r23
                sline[i++] = qr.rem + '0';
    1486:	11 e0       	ldi	r17, 0x01	; 1
    1488:	10 0f       	add	r17, r16
    148a:	d7 01       	movw	r26, r14
    148c:	a0 0f       	add	r26, r16
    148e:	b1 1d       	adc	r27, r1
    1490:	80 5d       	subi	r24, 0xD0	; 208
    1492:	8c 93       	st	X, r24
    1494:	01 2f       	mov	r16, r17
        }
        while(qr.quot);
    1496:	30 97       	sbiw	r30, 0x00	; 0
    1498:	71 f7       	brne	.-36     	; 0x1476 <lcd_int16+0xa0>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
    149a:	61 10       	cpse	r6, r1
    149c:	15 c0       	rjmp	.+42     	; 0x14c8 <lcd_int16+0xf2>
    149e:	77 20       	and	r7, r7
    14a0:	39 f0       	breq	.+14     	; 0x14b0 <lcd_int16+0xda>
        {
                sline[i++] = '-';
    14a2:	11 e0       	ldi	r17, 0x01	; 1
    14a4:	10 0f       	add	r17, r16
    14a6:	f7 01       	movw	r30, r14
    14a8:	e0 0f       	add	r30, r16
    14aa:	f1 1d       	adc	r31, r1
    14ac:	8d e2       	ldi	r24, 0x2D	; 45
    14ae:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    14b0:	aa 20       	and	r10, r10
    14b2:	41 f1       	breq	.+80     	; 0x1504 <lcd_int16+0x12e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14b4:	81 2f       	mov	r24, r17
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	2a 2d       	mov	r18, r10
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	82 17       	cp	r24, r18
    14be:	93 07       	cpc	r25, r19
    14c0:	0c f5       	brge	.+66     	; 0x1504 <lcd_int16+0x12e>
    14c2:	b1 2c       	mov	r11, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    14c4:	40 e2       	ldi	r20, 0x20	; 32
    14c6:	0c c0       	rjmp	.+24     	; 0x14e0 <lcd_int16+0x10a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    14c8:	aa 20       	and	r10, r10
    14ca:	a1 f0       	breq	.+40     	; 0x14f4 <lcd_int16+0x11e>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14cc:	81 2f       	mov	r24, r17
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	2a 2d       	mov	r18, r10
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	2c 19       	sub	r18, r12
    14d6:	3d 09       	sbc	r19, r13
    14d8:	82 17       	cp	r24, r18
    14da:	93 07       	cpc	r25, r19
    14dc:	5c f4       	brge	.+22     	; 0x14f4 <lcd_int16+0x11e>
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    14de:	40 e3       	ldi	r20, 0x30	; 48
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    14e0:	1f 5f       	subi	r17, 0xFF	; 255
    14e2:	f7 01       	movw	r30, r14
    14e4:	e8 0f       	add	r30, r24
    14e6:	f9 1f       	adc	r31, r25
    14e8:	40 83       	st	Z, r20
    14ea:	81 2f       	mov	r24, r17
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	82 17       	cp	r24, r18
    14f0:	93 07       	cpc	r25, r19
    14f2:	b4 f3       	brlt	.-20     	; 0x14e0 <lcd_int16+0x10a>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
    14f4:	bb 20       	and	r11, r11
    14f6:	31 f0       	breq	.+12     	; 0x1504 <lcd_int16+0x12e>
    14f8:	f7 01       	movw	r30, r14
    14fa:	e1 0f       	add	r30, r17
    14fc:	f1 1d       	adc	r31, r1
    14fe:	8d e2       	ldi	r24, 0x2D	; 45
    1500:	80 83       	st	Z, r24
    1502:	1f 5f       	subi	r17, 0xFF	; 255

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    1504:	11 50       	subi	r17, 0x01	; 1
    1506:	f7 01       	movw	r30, r14
    1508:	e1 0f       	add	r30, r17
    150a:	f1 1d       	adc	r31, r1
    150c:	60 81       	ld	r22, Z
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	0e 94 9d 07 	call	0xf3a	; 0xf3a <send_lcd>
    1514:	95 ed       	ldi	r25, 0xD5	; 213
    1516:	9a 95       	dec	r25
    1518:	f1 f7       	brne	.-4      	; 0x1516 <lcd_int16+0x140>
    151a:	00 00       	nop
    151c:	11 11       	cpse	r17, r1
    151e:	f2 cf       	rjmp	.-28     	; 0x1504 <lcd_int16+0x12e>
}
    1520:	61 96       	adiw	r28, 0x11	; 17
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	bf 90       	pop	r11
    153e:	af 90       	pop	r10
    1540:	9f 90       	pop	r9
    1542:	8f 90       	pop	r8
    1544:	7f 90       	pop	r7
    1546:	6f 90       	pop	r6
    1548:	5f 90       	pop	r5
    154a:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    154c:	00 e0       	ldi	r16, 0x00	; 0
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	7c 01       	movw	r14, r24
    1554:	90 cf       	rjmp	.-224    	; 0x1476 <lcd_int16+0xa0>

00001556 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	0b b6       	in	r0, 0x3b	; 59
    1562:	0f 92       	push	r0
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    1574:	e0 91 71 00 	lds	r30, 0x0071
    1578:	8e 2f       	mov	r24, r30
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	fc 01       	movw	r30, r24
    157e:	38 97       	sbiw	r30, 0x08	; 8
    1580:	e1 35       	cpi	r30, 0x51	; 81
    1582:	f1 05       	cpc	r31, r1
    1584:	b0 f0       	brcs	.+44     	; 0x15b2 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
    1586:	80 91 71 00 	lds	r24, 0x0071
    158a:	80 93 c9 01 	sts	0x01C9, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
    158e:	84 e0       	ldi	r24, 0x04	; 4
    1590:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0b be       	out	0x3b, r0	; 59
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    15b2:	ea 58       	subi	r30, 0x8A	; 138
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
    15ba:	80 91 34 01 	lds	r24, 0x0134
    15be:	e0 91 ca 01 	lds	r30, 0x01CA
    15c2:	f0 91 cb 01 	lds	r31, 0x01CB
    15c6:	e8 0f       	add	r30, r24
    15c8:	f1 1d       	adc	r31, r1
    15ca:	80 91 73 00 	lds	r24, 0x0073
    15ce:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
    15d0:	84 e9       	ldi	r24, 0x94	; 148
    15d2:	80 93 74 00 	sts	0x0074, r24
      break;      
    15d6:	de cf       	rjmp	.-68     	; 0x1594 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
    15d8:	80 91 cc 01 	lds	r24, 0x01CC
    15dc:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
    15e0:	10 92 34 01 	sts	0x0134, r1
      TWCR = TWCR_SEND;     //send SLA+RW
    15e4:	85 e8       	ldi	r24, 0x85	; 133
    15e6:	80 93 74 00 	sts	0x0074, r24
      break;
    15ea:	d4 cf       	rjmp	.-88     	; 0x1594 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
    15ec:	80 91 34 01 	lds	r24, 0x0134
    15f0:	90 91 cd 01 	lds	r25, 0x01CD
    15f4:	89 17       	cp	r24, r25
    15f6:	60 f7       	brcc	.-40     	; 0x15d0 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
    15f8:	e0 91 ca 01 	lds	r30, 0x01CA
    15fc:	f0 91 cb 01 	lds	r31, 0x01CB
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	98 0f       	add	r25, r24
    1604:	90 93 34 01 	sts	0x0134, r25
    1608:	e8 0f       	add	r30, r24
    160a:	f1 1d       	adc	r31, r1
    160c:	80 81       	ld	r24, Z
    160e:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
    1612:	85 e8       	ldi	r24, 0x85	; 133
    1614:	80 93 74 00 	sts	0x0074, r24
    1618:	bd cf       	rjmp	.-134    	; 0x1594 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
    161a:	85 ea       	ldi	r24, 0xA5	; 165
    161c:	80 93 74 00 	sts	0x0074, r24
      break;
    1620:	b9 cf       	rjmp	.-142    	; 0x1594 <__vector_33+0x3e>
    1622:	20 91 34 01 	lds	r18, 0x0134
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    1626:	80 91 cd 01 	lds	r24, 0x01CD
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	28 17       	cp	r18, r24
    1632:	39 07       	cpc	r19, r25
    1634:	dc f4       	brge	.+54     	; 0x166c <__vector_33+0x116>
    1636:	85 ec       	ldi	r24, 0xC5	; 197
    1638:	80 93 74 00 	sts	0x0074, r24
    163c:	ab cf       	rjmp	.-170    	; 0x1594 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    163e:	e0 91 ca 01 	lds	r30, 0x01CA
    1642:	f0 91 cb 01 	lds	r31, 0x01CB
    1646:	80 91 34 01 	lds	r24, 0x0134
    164a:	21 e0       	ldi	r18, 0x01	; 1
    164c:	28 0f       	add	r18, r24
    164e:	20 93 34 01 	sts	0x0134, r18
    1652:	e8 0f       	add	r30, r24
    1654:	f1 1d       	adc	r31, r1
    1656:	80 91 73 00 	lds	r24, 0x0073
    165a:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
    165c:	80 91 cd 01 	lds	r24, 0x01CD
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	28 17       	cp	r18, r24
    1668:	39 07       	cpc	r19, r25
    166a:	2c f3       	brlt	.-54     	; 0x1636 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
    166c:	85 e8       	ldi	r24, 0x85	; 133
    166e:	80 93 74 00 	sts	0x0074, r24
    1672:	90 cf       	rjmp	.-224    	; 0x1594 <__vector_33+0x3e>

00001674 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    1674:	80 91 74 00 	lds	r24, 0x0074
}
    1678:	81 70       	andi	r24, 0x01	; 1
    167a:	08 95       	ret

0000167c <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    167c:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
    1680:	90 fd       	sbrc	r25, 0
    1682:	fc cf       	rjmp	.-8      	; 0x167c <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
    1684:	8e 7f       	andi	r24, 0xFE	; 254
    1686:	80 93 cc 01 	sts	0x01CC, r24
  twi_buf = twi_data;                   //load pointer to write buffer
    168a:	70 93 cb 01 	sts	0x01CB, r23
    168e:	60 93 ca 01 	sts	0x01CA, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
    1692:	40 93 cd 01 	sts	0x01CD, r20
  TWCR = TWCR_START;                    //initiate START
    1696:	85 ea       	ldi	r24, 0xA5	; 165
    1698:	80 93 74 00 	sts	0x0074, r24
    169c:	08 95       	ret

0000169e <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
    169e:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
    16a2:	90 fd       	sbrc	r25, 0
    16a4:	fc cf       	rjmp	.-8      	; 0x169e <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	80 93 cc 01 	sts	0x01CC, r24
  twi_buf = twi_data;                  //load pointer to write buffer
    16ac:	70 93 cb 01 	sts	0x01CB, r23
    16b0:	60 93 ca 01 	sts	0x01CA, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
    16b4:	40 93 cd 01 	sts	0x01CD, r20
  TWCR = TWCR_START;                   //initiate START
    16b8:	85 ea       	ldi	r24, 0xA5	; 165
    16ba:	80 93 74 00 	sts	0x0074, r24
    16be:	08 95       	ret

000016c0 <init_twi>:
//10K pullups are present on the board
//For the alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
    16c6:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
    16ca:	8c e0       	ldi	r24, 0x0C	; 12
    16cc:	80 93 70 00 	sts	0x0070, r24
    16d0:	08 95       	ret

000016d2 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16d2:	5d 9b       	sbis	0x0b, 5	; 11
    16d4:	fe cf       	rjmp	.-4      	; 0x16d2 <uart_putc>
    UDR0 = data;    // Send data byte
    16d6:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16d8:	5d 9b       	sbis	0x0b, 5	; 11
    16da:	fe cf       	rjmp	.-4      	; 0x16d8 <uart_putc+0x6>
}
    16dc:	08 95       	ret

000016de <uart_puts>:

//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    16de:	fc 01       	movw	r30, r24
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    16e0:	90 81       	ld	r25, Z
    16e2:	99 23       	and	r25, r25
    16e4:	49 f0       	breq	.+18     	; 0x16f8 <uart_puts+0x1a>
    16e6:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16e8:	5d 9b       	sbis	0x0b, 5	; 11
    16ea:	fe cf       	rjmp	.-4      	; 0x16e8 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
    16ec:	9c b9       	out	0x0c, r25	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    16ee:	5d 9b       	sbis	0x0b, 5	; 11
    16f0:	fe cf       	rjmp	.-4      	; 0x16ee <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
    16f2:	91 91       	ld	r25, Z+
    16f4:	91 11       	cpse	r25, r1
    16f6:	f8 cf       	rjmp	.-16     	; 0x16e8 <uart_puts+0xa>
    16f8:	08 95       	ret

000016fa <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    16fa:	9c 01       	movw	r18, r24
    16fc:	fc 01       	movw	r30, r24
    16fe:	44 91       	lpm	r20, Z
    1700:	44 23       	and	r20, r20
    1702:	69 f0       	breq	.+26     	; 0x171e <uart_puts_p+0x24>
        uart_putc(pgm_read_byte(str++));
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	f9 01       	movw	r30, r18
    1708:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    170a:	5d 9b       	sbis	0x0b, 5	; 11
    170c:	fe cf       	rjmp	.-4      	; 0x170a <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
    170e:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
    1710:	5d 9b       	sbis	0x0b, 5	; 11
    1712:	fe cf       	rjmp	.-4      	; 0x1710 <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
    1714:	9c 01       	movw	r18, r24
    1716:	fc 01       	movw	r30, r24
    1718:	44 91       	lpm	r20, Z
    171a:	41 11       	cpse	r20, r1
    171c:	f3 cf       	rjmp	.-26     	; 0x1704 <uart_puts_p+0xa>
        uart_putc(pgm_read_byte(str++));
    }
}
    171e:	08 95       	ret

00001720 <uart_init>:
//Jumpers J14 and J16 (mega128.1) or Jumpers J7 and J9 (mega128.2)
//must be in place for the MAX232 chip to get data.

void uart_init(){
//rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    1720:	8a b1       	in	r24, 0x0a	; 10
    1722:	88 69       	ori	r24, 0x98	; 152
    1724:	8a b9       	out	0x0a, r24	; 10
//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!

//  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
//async operation, no parity,  one stop bit, 8-bit characters
UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
    1726:	e5 e9       	ldi	r30, 0x95	; 149
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	86 60       	ori	r24, 0x06	; 6
    172e:	80 83       	st	Z, r24
UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
    1730:	10 92 90 00 	sts	0x0090, r1
UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
    1734:	8f ec       	ldi	r24, 0xCF	; 207
    1736:	89 b9       	out	0x09, r24	; 9
    1738:	08 95       	ret

0000173a <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    173a:	80 e8       	ldi	r24, 0x80	; 128
    173c:	9e e3       	ldi	r25, 0x3E	; 62
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <uart_getc+0xa>
    1740:	01 97       	sbiw	r24, 0x01	; 1
  timer++;
  if(timer >= 16000){ return(0);}
    1742:	21 f0       	breq	.+8      	; 0x174c <uart_getc+0x12>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
    1744:	5f 9b       	sbis	0x0b, 7	; 11
    1746:	fc cf       	rjmp	.-8      	; 0x1740 <uart_getc+0x6>
  //what should we return if nothing comes in?
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
    1748:	8c b1       	in	r24, 0x0c	; 12
    174a:	08 95       	ret
char uart_getc(void) {
  uint16_t timer = 0;

  while (!(UCSR0A & (1<<RXC0))) {
  timer++;
  if(timer >= 16000){ return(0);}
    174c:	80 e0       	ldi	r24, 0x00	; 0
  //return the data into a global variable
  //give uart_getc the address of the variable
  //return a -1 if no data comes back.
  } // Wait for byte to arrive
  return(UDR0); //return the received data
}
    174e:	08 95       	ret

00001750 <get_int_status>:
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){

    si4734_wr_buf[0] = GET_INT_STATUS;              
    1750:	84 e1       	ldi	r24, 0x14	; 20
    1752:	80 93 1e 02 	sts	0x021E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	6e e1       	ldi	r22, 0x1E	; 30
    175a:	72 e0       	ldi	r23, 0x02	; 2
    175c:	82 e2       	ldi	r24, 0x22	; 34
    175e:	0e 94 3e 0b 	call	0x167c	; 0x167c <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1762:	0e 94 3a 0b 	call	0x1674	; 0x1674 <twi_busy>
    1766:	81 11       	cpse	r24, r1
    1768:	fc cf       	rjmp	.-8      	; 0x1762 <get_int_status+0x12>
    176a:	8f ea       	ldi	r24, 0xAF	; 175
    176c:	94 e0       	ldi	r25, 0x04	; 4
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <get_int_status+0x1e>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <get_int_status+0x24>
    1774:	00 00       	nop
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	60 e4       	ldi	r22, 0x40	; 64
    177a:	72 e0       	ldi	r23, 0x02	; 2
    177c:	82 e2       	ldi	r24, 0x22	; 34
    177e:	0e 94 4f 0b 	call	0x169e	; 0x169e <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
    1782:	0e 94 3a 0b 	call	0x1674	; 0x1674 <twi_busy>
    1786:	81 11       	cpse	r24, r1
    1788:	fc cf       	rjmp	.-8      	; 0x1782 <get_int_status+0x32>
    return(si4734_rd_buf[0]);
}
    178a:	80 91 40 02 	lds	r24, 0x0240
    178e:	08 95       	ret

00001790 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
    1790:	80 91 3f 02 	lds	r24, 0x023F
    1794:	88 23       	and	r24, r24
    1796:	e1 f3       	breq	.-8      	; 0x1790 <fm_tune_freq>
  si4734_wr_buf[0] = 0x20;  //fm tune command
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	80 93 1e 02 	sts	0x021E, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
    179e:	10 92 1f 02 	sts	0x021F, r1
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
    17a2:	80 91 02 01 	lds	r24, 0x0102
    17a6:	90 91 03 01 	lds	r25, 0x0103
    17aa:	90 93 20 02 	sts	0x0220, r25
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
    17ae:	80 93 21 02 	sts	0x0221, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
    17b2:	10 92 22 02 	sts	0x0222, r1
  //send fm tune command
  STC_interrupt = FALSE;
    17b6:	10 92 3f 02 	sts	0x023F, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
    17ba:	45 e0       	ldi	r20, 0x05	; 5
    17bc:	6e e1       	ldi	r22, 0x1E	; 30
    17be:	72 e0       	ldi	r23, 0x02	; 2
    17c0:	82 e2       	ldi	r24, 0x22	; 34
    17c2:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <twi_start_wr>

000017c6 <radio_pwr_dwn>:

void radio_pwr_dwn(){

    //save current frequency to EEPROM
    //switch(current_radio_band){
    eeprom_write_word(&eeprom_fm_freq, current_fm_freq); 
    17c6:	60 91 02 01 	lds	r22, 0x0102
    17ca:	70 91 03 01 	lds	r23, 0x0103
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <eeprom_write_word>
    // case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
    // case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
    // default  : break;
    //}//switch      

    eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
    17d6:	60 91 61 01 	lds	r22, 0x0161
    17da:	85 e3       	ldi	r24, 0x35	; 53
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <eeprom_write_byte>

    //send fm power down command
    si4734_wr_buf[0] = 0x11;
    17e2:	81 e1       	ldi	r24, 0x11	; 17
    17e4:	80 93 1e 02 	sts	0x021E, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	6e e1       	ldi	r22, 0x1E	; 30
    17ec:	72 e0       	ldi	r23, 0x02	; 2
    17ee:	82 e2       	ldi	r24, 0x22	; 34
    17f0:	0e 94 3e 0b 	call	0x167c	; 0x167c <twi_start_wr>
    17f4:	87 ed       	ldi	r24, 0xD7	; 215
    17f6:	94 e0       	ldi	r25, 0x04	; 4
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <radio_pwr_dwn+0x32>
    17fc:	00 c0       	rjmp	.+0      	; 0x17fe <radio_pwr_dwn+0x38>
    17fe:	00 00       	nop
    1800:	08 95       	ret

00001802 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
    1802:	83 e2       	ldi	r24, 0x23	; 35
    1804:	80 93 1e 02 	sts	0x021E, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	80 93 1f 02 	sts	0x021F, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    180e:	42 e0       	ldi	r20, 0x02	; 2
    1810:	6e e1       	ldi	r22, 0x1E	; 30
    1812:	72 e0       	ldi	r23, 0x02	; 2
    1814:	82 e2       	ldi	r24, 0x22	; 34
    1816:	0e 94 3e 0b 	call	0x167c	; 0x167c <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    181a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <twi_busy>
    181e:	81 11       	cpse	r24, r1
    1820:	fc cf       	rjmp	.-8      	; 0x181a <fm_rsq_status+0x18>
    1822:	8f ea       	ldi	r24, 0xAF	; 175
    1824:	94 e0       	ldi	r25, 0x04	; 4
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <fm_rsq_status+0x24>
    182a:	00 c0       	rjmp	.+0      	; 0x182c <fm_rsq_status+0x2a>
    182c:	00 00       	nop
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    182e:	48 e0       	ldi	r20, 0x08	; 8
    1830:	67 e2       	ldi	r22, 0x27	; 39
    1832:	72 e0       	ldi	r23, 0x02	; 2
    1834:	82 e2       	ldi	r24, 0x22	; 34
    1836:	0e 94 4f 0b 	call	0x169e	; 0x169e <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    183a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <twi_busy>
    183e:	81 11       	cpse	r24, r1
    1840:	fc cf       	rjmp	.-8      	; 0x183a <fm_rsq_status+0x38>
}
    1842:	08 95       	ret

00001844 <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
    1844:	82 e2       	ldi	r24, 0x22	; 34
    1846:	80 93 1e 02 	sts	0x021E, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	80 93 1f 02 	sts	0x021F, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
    1850:	42 e0       	ldi	r20, 0x02	; 2
    1852:	6e e1       	ldi	r22, 0x1E	; 30
    1854:	72 e0       	ldi	r23, 0x02	; 2
    1856:	82 e2       	ldi	r24, 0x22	; 34
    1858:	0e 94 3e 0b 	call	0x167c	; 0x167c <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
    185c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <twi_busy>
    1860:	81 11       	cpse	r24, r1
    1862:	fc cf       	rjmp	.-8      	; 0x185c <fm_tune_status+0x18>
    1864:	8f ea       	ldi	r24, 0xAF	; 175
    1866:	94 e0       	ldi	r25, 0x04	; 4
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <fm_tune_status+0x24>
    186c:	00 c0       	rjmp	.+0      	; 0x186e <fm_tune_status+0x2a>
    186e:	00 00       	nop
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
    1870:	48 e0       	ldi	r20, 0x08	; 8
    1872:	67 e2       	ldi	r22, 0x27	; 39
    1874:	72 e0       	ldi	r23, 0x02	; 2
    1876:	82 e2       	ldi	r24, 0x22	; 34
    1878:	0e 94 4f 0b 	call	0x169e	; 0x169e <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
    187c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <twi_busy>
    1880:	81 11       	cpse	r24, r1
    1882:	fc cf       	rjmp	.-8      	; 0x187c <fm_tune_status+0x38>
}
    1884:	08 95       	ret

00001886 <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
    1886:	ee e1       	ldi	r30, 0x1E	; 30
    1888:	f2 e0       	ldi	r31, 0x02	; 2
    188a:	22 e1       	ldi	r18, 0x12	; 18
    188c:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
    188e:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
    1890:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
    1892:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
    1894:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
    1896:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
    1898:	46 e0       	ldi	r20, 0x06	; 6
    189a:	bf 01       	movw	r22, r30
    189c:	82 e2       	ldi	r24, 0x22	; 34
    189e:	0e 94 3e 0b 	call	0x167c	; 0x167c <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18a2:	8f e3       	ldi	r24, 0x3F	; 63
    18a4:	9c e9       	ldi	r25, 0x9C	; 156
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <set_property+0x20>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <set_property+0x26>
    18ac:	00 00       	nop
    18ae:	08 95       	ret

000018b0 <fm_pwr_up>:
    18b0:	ee e1       	ldi	r30, 0x1E	; 30
    18b2:	f2 e0       	ldi	r31, 0x02	; 2
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	80 83       	st	Z, r24
    18b8:	80 e5       	ldi	r24, 0x50	; 80
    18ba:	81 83       	std	Z+1, r24	; 0x01
    18bc:	85 e0       	ldi	r24, 0x05	; 5
    18be:	82 83       	std	Z+2, r24	; 0x02
    18c0:	43 e0       	ldi	r20, 0x03	; 3
    18c2:	bf 01       	movw	r22, r30
    18c4:	82 e2       	ldi	r24, 0x22	; 34
    18c6:	0e 94 3e 0b 	call	0x167c	; 0x167c <twi_start_wr>
    18ca:	2f ef       	ldi	r18, 0xFF	; 255
    18cc:	8b ed       	ldi	r24, 0xDB	; 219
    18ce:	95 e0       	ldi	r25, 0x05	; 5
    18d0:	21 50       	subi	r18, 0x01	; 1
    18d2:	80 40       	sbci	r24, 0x00	; 0
    18d4:	90 40       	sbci	r25, 0x00	; 0
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <fm_pwr_up+0x20>
    18d8:	00 c0       	rjmp	.+0      	; 0x18da <fm_pwr_up+0x2a>
    18da:	00 00       	nop
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <set_property>

000018e8 <main>:
//initialized values, then runs a loop that just takes inputs from the pushbuttons and displays the 7 segment display
//*************************************
int main()
{

    lm73_temp = 0;  //a place to assemble the temperature from the lm73
    18e8:	10 92 5e 01 	sts	0x015E, r1
    18ec:	10 92 5d 01 	sts	0x015D, r1
}
//*****************************************
//Sets the values of the dec_to_7seg array to their corresponding values that will show up on the LED display
//*****************************************
void dec_to_7seg_init(){
    dec_to_7seg[0]=0b11000000;
    18f0:	80 ec       	ldi	r24, 0xC0	; 192
    18f2:	80 93 39 01 	sts	0x0139, r24
    dec_to_7seg[1]=0b11111001;
    18f6:	89 ef       	ldi	r24, 0xF9	; 249
    18f8:	80 93 3a 01 	sts	0x013A, r24
    dec_to_7seg[2]=0b10100100;
    18fc:	84 ea       	ldi	r24, 0xA4	; 164
    18fe:	80 93 3b 01 	sts	0x013B, r24
    dec_to_7seg[3]=0b10110000;
    1902:	80 eb       	ldi	r24, 0xB0	; 176
    1904:	80 93 3c 01 	sts	0x013C, r24
    dec_to_7seg[4]=0b10011001;
    1908:	89 e9       	ldi	r24, 0x99	; 153
    190a:	80 93 3d 01 	sts	0x013D, r24
    dec_to_7seg[5]=0b10010010;
    190e:	82 e9       	ldi	r24, 0x92	; 146
    1910:	80 93 3e 01 	sts	0x013E, r24
    dec_to_7seg[6]=0b10000010;
    1914:	82 e8       	ldi	r24, 0x82	; 130
    1916:	80 93 3f 01 	sts	0x013F, r24
    dec_to_7seg[7]=0b11111000;
    191a:	88 ef       	ldi	r24, 0xF8	; 248
    191c:	80 93 40 01 	sts	0x0140, r24
    dec_to_7seg[8]=0b10000000;
    1920:	80 e8       	ldi	r24, 0x80	; 128
    1922:	80 93 41 01 	sts	0x0141, r24
    dec_to_7seg[9]=0b10010000;
    1926:	80 e9       	ldi	r24, 0x90	; 144
    1928:	80 93 42 01 	sts	0x0142, r24
    dec_to_7seg[10]=0b11111111;
    192c:	cf ef       	ldi	r28, 0xFF	; 255
    192e:	c0 93 43 01 	sts	0x0143, r28
int main()
{

    lm73_temp = 0;  //a place to assemble the temperature from the lm73
    dec_to_7seg_init();
    init_variables();
    1932:	0e 94 1a 06 	call	0xc34	; 0xc34 <init_variables>
//initializes the tcnt0 mode
//set to interrupt on compare match, uses external clock
//used to find the time each second for real world time
//*************************************
void tcnt0_init(void){
    TIMSK  |=  (1<<TOIE0); //enable TCNT0 overflow interrupt
    1936:	87 b7       	in	r24, 0x37	; 55
    1938:	81 60       	ori	r24, 0x01	; 1
    193a:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1<<CS00)|(0<<CS01)|(0<<CS02); //normal mode
    193c:	83 b7       	in	r24, 0x33	; 51
    193e:	81 60       	ori	r24, 0x01	; 1
    1940:	83 bf       	out	0x33, r24	; 51
    ASSR   |=  (1<<AS0);	//use external clock
    1942:	80 b7       	in	r24, 0x30	; 48
    1944:	88 60       	ori	r24, 0x08	; 8
    1946:	80 bf       	out	0x30, r24	; 48
//initializes the tcnt2 mode
//PWM mode, inverted mode
//used for the dimming of the 7 seg as PWM source
//*************************************
void tcnt2_init(void){
    TCCR2  |=  (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(1<<COM20)|(1<<CS20); //PWM mode, inverted mode
    1948:	85 b5       	in	r24, 0x25	; 37
    194a:	89 67       	ori	r24, 0x79	; 121
    194c:	85 bd       	out	0x25, r24	; 37
    OCR2 = 0xff; //OCR2 intially high so that 7 seg is at max
    194e:	c3 bd       	out	0x23, r28	; 35
//initializes the tcnt3 mode
//set the fast PWM with ICR3 at top 
//used to set the volume on the audio amplifer
//*************************************
void TCNT3_Init(void){
    DDRE |= (1<<PE3);
    1950:	13 9a       	sbi	0x02, 3	; 2
    //Fast PWM
    TCCR3A |= (1<<COM3A1) | (1<<COM3A0) | (1<<WGM31);
    1952:	80 91 8b 00 	lds	r24, 0x008B
    1956:	82 6c       	ori	r24, 0xC2	; 194
    1958:	80 93 8b 00 	sts	0x008B, r24
    //ICR3 as TOP
    TCCR3B |= (1<<WGM33) | (1<<WGM32) | (1<<CS30);
    195c:	80 91 8a 00 	lds	r24, 0x008A
    1960:	89 61       	ori	r24, 0x19	; 25
    1962:	80 93 8a 00 	sts	0x008A, r24
    OCR3A=0xF000; //set at this value	so it is initially off
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 ef       	ldi	r25, 0xF0	; 240
    196a:	90 93 87 00 	sts	0x0087, r25
    196e:	80 93 86 00 	sts	0x0086, r24
    ICR3 = 0xF000;	//cleared at this value
    1972:	90 93 81 00 	sts	0x0081, r25
    1976:	80 93 80 00 	sts	0x0080, r24

    tcnt0_init();	//intialize timer/counter 0
    tcnt2_init();	//intialize timer/counter 0
    TCNT3_Init();	//intialize timer/counter 0

    DDRD |= 0b00001000;
    197a:	8b 9a       	sbi	0x11, 3	; 17
    DDRB |= 0xF0;  
    197c:	87 b3       	in	r24, 0x17	; 23
    197e:	80 6f       	ori	r24, 0xF0	; 240
    1980:	87 bb       	out	0x17, r24	; 23
    uart_init();
    1982:	0e 94 90 0b 	call	0x1720	; 0x1720 <uart_init>
    spi_init();
    1986:	0e 94 58 06 	call	0xcb0	; 0xcb0 <spi_init>
    lcd_init();
    198a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <lcd_init>
    init_twi(); //initalize TWI (twi_master.h)  
    198e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <init_twi>
    clear_display();
    1992:	0e 94 82 08 	call	0x1104	; 0x1104 <clear_display>
    DDRF  &= ~(_BV(DDF7)); //make port F bit 7 is ADC input  
    1996:	80 91 61 00 	lds	r24, 0x0061
    199a:	8f 77       	andi	r24, 0x7F	; 127
    199c:	80 93 61 00 	sts	0x0061, r24
    PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off
    19a0:	80 91 62 00 	lds	r24, 0x0062
    19a4:	8f 77       	andi	r24, 0x7F	; 127
    19a6:	80 93 62 00 	sts	0x0062, r24

    ADMUX = 0b01000111; //single-ended, input PORTF bit 7, right adjusted, 10 bits
    19aa:	87 e4       	ldi	r24, 0x47	; 71
    19ac:	87 b9       	out	0x07, r24	; 7

    ADCSRA = 0b10000111; //ADC enabled, don't start yet, single shot mode
    19ae:	87 e8       	ldi	r24, 0x87	; 135
    19b0:	86 b9       	out	0x06, r24	; 6
    sei();		//set global interrupts
    19b2:	78 94       	sei
    set_cursor(2,0);
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	0e 94 0e 08 	call	0x101c	; 0x101c <set_cursor>
    string2lcd(" L:"); //send the string to LCD (lcd_functions)
    19bc:	8a e1       	ldi	r24, 0x1A	; 26
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	0e 94 b2 08 	call	0x1164	; 0x1164 <string2lcd>
    set_cursor(2,6);
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	0e 94 0e 08 	call	0x101c	; 0x101c <set_cursor>
    string2lcd(" R:"); //send the string to LCD (lcd_functions)
    19cc:	8e e1       	ldi	r24, 0x1E	; 30
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	0e 94 b2 08 	call	0x1164	; 0x1164 <string2lcd>

    DDRE  |= 0x04; //Port E bit 2 is active high reset for radio 
    19d4:	12 9a       	sbi	0x02, 2	; 2
    DDRE  |= 0x08; //Port E bit 3 is TCNT3 PWM output for volume
    19d6:	13 9a       	sbi	0x02, 3	; 2
    PORTE |= 0x04; //radio reset is on at powerup (active high)
    19d8:	1a 9a       	sbi	0x03, 2	; 3
    //  PORTE |= 0x40; //pulse low to load switch values, else its in shift mode
    PORTE |= 0x08;
    19da:	1b 9a       	sbi	0x03, 3	; 3
    while(1){

	DDRA=0x00; //make PORTA an input port
	PORTA=0xFF; //make PORTA have pullups

	PORTB=0b01110000; //enable tristate buffer for pushbutton switches
    19dc:	d0 e7       	ldi	r29, 0x70	; 112
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <main+0xfc>
	if(rcv_rdy==1){
	    //set_cursor(2, 8);
	    string2lcd(lcd_str_array);
	    rcv_rdy=0;
	}
	encoder_logic();  //call encoder logic to check the encoders and set the value
    19e0:	0e 94 47 03 	call	0x68e	; 0x68e <encoder_logic>
    //  PORTE |= 0x40; //pulse low to load switch values, else its in shift mode
    PORTE |= 0x08;

    while(1){

	DDRA=0x00; //make PORTA an input port
    19e4:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xFF; //make PORTA have pullups
    19e6:	cb bb       	out	0x1b, r28	; 27

	PORTB=0b01110000; //enable tristate buffer for pushbutton switches
    19e8:	d8 bb       	out	0x18, r29	; 24
    19ea:	8f e8       	ldi	r24, 0x8F	; 143
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <main+0x106>
    19f2:	00 c0       	rjmp	.+0      	; 0x19f4 <main+0x10c>
    19f4:	00 00       	nop

	_delay_ms(0.1); //insert delay for buffer
	Get_Input();
    19f6:	0e 94 83 06 	call	0xd06	; 0xd06 <Get_Input>

	PORTB = 0x00; //disable tristate buffer for pushbutton switches
    19fa:	18 ba       	out	0x18, r1	; 24

	DDRA=0xFF; //make PORTA an output
    19fc:	ca bb       	out	0x1a, r28	; 26

	Time_Display();
    19fe:	0e 94 0b 05 	call	0xa16	; 0xa16 <Time_Display>

	if(rcv_rdy==1){
    1a02:	80 91 37 01 	lds	r24, 0x0137
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	59 f7       	brne	.-42     	; 0x19e0 <main+0xf8>
	    //set_cursor(2, 8);
	    string2lcd(lcd_str_array);
    1a0a:	89 e6       	ldi	r24, 0x69	; 105
    1a0c:	91 e0       	ldi	r25, 0x01	; 1
    1a0e:	0e 94 b2 08 	call	0x1164	; 0x1164 <string2lcd>
	    rcv_rdy=0;
    1a12:	10 92 37 01 	sts	0x0137, r1
    1a16:	e4 cf       	rjmp	.-56     	; 0x19e0 <main+0xf8>

00001a18 <__divmodhi4>:
    1a18:	97 fb       	bst	r25, 7
    1a1a:	07 2e       	mov	r0, r23
    1a1c:	16 f4       	brtc	.+4      	; 0x1a22 <__divmodhi4+0xa>
    1a1e:	00 94       	com	r0
    1a20:	07 d0       	rcall	.+14     	; 0x1a30 <__divmodhi4_neg1>
    1a22:	77 fd       	sbrc	r23, 7
    1a24:	09 d0       	rcall	.+18     	; 0x1a38 <__divmodhi4_neg2>
    1a26:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__udivmodhi4>
    1a2a:	07 fc       	sbrc	r0, 7
    1a2c:	05 d0       	rcall	.+10     	; 0x1a38 <__divmodhi4_neg2>
    1a2e:	3e f4       	brtc	.+14     	; 0x1a3e <__divmodhi4_exit>

00001a30 <__divmodhi4_neg1>:
    1a30:	90 95       	com	r25
    1a32:	81 95       	neg	r24
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	08 95       	ret

00001a38 <__divmodhi4_neg2>:
    1a38:	70 95       	com	r23
    1a3a:	61 95       	neg	r22
    1a3c:	7f 4f       	sbci	r23, 0xFF	; 255

00001a3e <__divmodhi4_exit>:
    1a3e:	08 95       	ret

00001a40 <__divmodsi4>:
    1a40:	05 2e       	mov	r0, r21
    1a42:	97 fb       	bst	r25, 7
    1a44:	1e f4       	brtc	.+6      	; 0x1a4c <__divmodsi4+0xc>
    1a46:	00 94       	com	r0
    1a48:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__negsi2>
    1a4c:	57 fd       	sbrc	r21, 7
    1a4e:	07 d0       	rcall	.+14     	; 0x1a5e <__divmodsi4_neg2>
    1a50:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__udivmodsi4>
    1a54:	07 fc       	sbrc	r0, 7
    1a56:	03 d0       	rcall	.+6      	; 0x1a5e <__divmodsi4_neg2>
    1a58:	4e f4       	brtc	.+18     	; 0x1a6c <__divmodsi4_exit>
    1a5a:	0c 94 37 0d 	jmp	0x1a6e	; 0x1a6e <__negsi2>

00001a5e <__divmodsi4_neg2>:
    1a5e:	50 95       	com	r21
    1a60:	40 95       	com	r20
    1a62:	30 95       	com	r19
    1a64:	21 95       	neg	r18
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	4f 4f       	sbci	r20, 0xFF	; 255
    1a6a:	5f 4f       	sbci	r21, 0xFF	; 255

00001a6c <__divmodsi4_exit>:
    1a6c:	08 95       	ret

00001a6e <__negsi2>:
    1a6e:	90 95       	com	r25
    1a70:	80 95       	com	r24
    1a72:	70 95       	com	r23
    1a74:	61 95       	neg	r22
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	08 95       	ret

00001a7e <__tablejump2__>:
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	00 24       	eor	r0, r0
    1a84:	00 1c       	adc	r0, r0
    1a86:	0b be       	out	0x3b, r0	; 59
    1a88:	07 90       	elpm	r0, Z+
    1a8a:	f6 91       	elpm	r31, Z
    1a8c:	e0 2d       	mov	r30, r0
    1a8e:	09 94       	ijmp

00001a90 <__umulhisi3>:
    1a90:	a2 9f       	mul	r26, r18
    1a92:	b0 01       	movw	r22, r0
    1a94:	b3 9f       	mul	r27, r19
    1a96:	c0 01       	movw	r24, r0
    1a98:	a3 9f       	mul	r26, r19
    1a9a:	70 0d       	add	r23, r0
    1a9c:	81 1d       	adc	r24, r1
    1a9e:	11 24       	eor	r1, r1
    1aa0:	91 1d       	adc	r25, r1
    1aa2:	b2 9f       	mul	r27, r18
    1aa4:	70 0d       	add	r23, r0
    1aa6:	81 1d       	adc	r24, r1
    1aa8:	11 24       	eor	r1, r1
    1aaa:	91 1d       	adc	r25, r1
    1aac:	08 95       	ret

00001aae <__udivmodhi4>:
    1aae:	aa 1b       	sub	r26, r26
    1ab0:	bb 1b       	sub	r27, r27
    1ab2:	51 e1       	ldi	r21, 0x11	; 17
    1ab4:	07 c0       	rjmp	.+14     	; 0x1ac4 <__udivmodhi4_ep>

00001ab6 <__udivmodhi4_loop>:
    1ab6:	aa 1f       	adc	r26, r26
    1ab8:	bb 1f       	adc	r27, r27
    1aba:	a6 17       	cp	r26, r22
    1abc:	b7 07       	cpc	r27, r23
    1abe:	10 f0       	brcs	.+4      	; 0x1ac4 <__udivmodhi4_ep>
    1ac0:	a6 1b       	sub	r26, r22
    1ac2:	b7 0b       	sbc	r27, r23

00001ac4 <__udivmodhi4_ep>:
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	5a 95       	dec	r21
    1aca:	a9 f7       	brne	.-22     	; 0x1ab6 <__udivmodhi4_loop>
    1acc:	80 95       	com	r24
    1ace:	90 95       	com	r25
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	08 95       	ret

00001ad6 <__udivmodsi4>:
    1ad6:	a1 e2       	ldi	r26, 0x21	; 33
    1ad8:	1a 2e       	mov	r1, r26
    1ada:	aa 1b       	sub	r26, r26
    1adc:	bb 1b       	sub	r27, r27
    1ade:	fd 01       	movw	r30, r26
    1ae0:	0d c0       	rjmp	.+26     	; 0x1afc <__udivmodsi4_ep>

00001ae2 <__udivmodsi4_loop>:
    1ae2:	aa 1f       	adc	r26, r26
    1ae4:	bb 1f       	adc	r27, r27
    1ae6:	ee 1f       	adc	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
    1aea:	a2 17       	cp	r26, r18
    1aec:	b3 07       	cpc	r27, r19
    1aee:	e4 07       	cpc	r30, r20
    1af0:	f5 07       	cpc	r31, r21
    1af2:	20 f0       	brcs	.+8      	; 0x1afc <__udivmodsi4_ep>
    1af4:	a2 1b       	sub	r26, r18
    1af6:	b3 0b       	sbc	r27, r19
    1af8:	e4 0b       	sbc	r30, r20
    1afa:	f5 0b       	sbc	r31, r21

00001afc <__udivmodsi4_ep>:
    1afc:	66 1f       	adc	r22, r22
    1afe:	77 1f       	adc	r23, r23
    1b00:	88 1f       	adc	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	1a 94       	dec	r1
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <__udivmodsi4_loop>
    1b08:	60 95       	com	r22
    1b0a:	70 95       	com	r23
    1b0c:	80 95       	com	r24
    1b0e:	90 95       	com	r25
    1b10:	9b 01       	movw	r18, r22
    1b12:	ac 01       	movw	r20, r24
    1b14:	bd 01       	movw	r22, r26
    1b16:	cf 01       	movw	r24, r30
    1b18:	08 95       	ret

00001b1a <__itoa_ncheck>:
    1b1a:	bb 27       	eor	r27, r27
    1b1c:	4a 30       	cpi	r20, 0x0A	; 10
    1b1e:	31 f4       	brne	.+12     	; 0x1b2c <__itoa_ncheck+0x12>
    1b20:	99 23       	and	r25, r25
    1b22:	22 f4       	brpl	.+8      	; 0x1b2c <__itoa_ncheck+0x12>
    1b24:	bd e2       	ldi	r27, 0x2D	; 45
    1b26:	90 95       	com	r25
    1b28:	81 95       	neg	r24
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__utoa_common>

00001b30 <__utoa_ncheck>:
    1b30:	bb 27       	eor	r27, r27

00001b32 <__utoa_common>:
    1b32:	fb 01       	movw	r30, r22
    1b34:	55 27       	eor	r21, r21
    1b36:	aa 27       	eor	r26, r26
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	aa 1f       	adc	r26, r26
    1b3e:	a4 17       	cp	r26, r20
    1b40:	10 f0       	brcs	.+4      	; 0x1b46 <__utoa_common+0x14>
    1b42:	a4 1b       	sub	r26, r20
    1b44:	83 95       	inc	r24
    1b46:	50 51       	subi	r21, 0x10	; 16
    1b48:	b9 f7       	brne	.-18     	; 0x1b38 <__utoa_common+0x6>
    1b4a:	a0 5d       	subi	r26, 0xD0	; 208
    1b4c:	aa 33       	cpi	r26, 0x3A	; 58
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <__utoa_common+0x20>
    1b50:	a9 5d       	subi	r26, 0xD9	; 217
    1b52:	a1 93       	st	Z+, r26
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	79 f7       	brne	.-34     	; 0x1b36 <__utoa_common+0x4>
    1b58:	b1 11       	cpse	r27, r1
    1b5a:	b1 93       	st	Z+, r27
    1b5c:	11 92       	st	Z+, r1
    1b5e:	cb 01       	movw	r24, r22
    1b60:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <strrev>

00001b64 <strrev>:
    1b64:	dc 01       	movw	r26, r24
    1b66:	fc 01       	movw	r30, r24
    1b68:	67 2f       	mov	r22, r23
    1b6a:	71 91       	ld	r23, Z+
    1b6c:	77 23       	and	r23, r23
    1b6e:	e1 f7       	brne	.-8      	; 0x1b68 <strrev+0x4>
    1b70:	32 97       	sbiw	r30, 0x02	; 2
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <strrev+0x18>
    1b74:	7c 91       	ld	r23, X
    1b76:	6d 93       	st	X+, r22
    1b78:	70 83       	st	Z, r23
    1b7a:	62 91       	ld	r22, -Z
    1b7c:	ae 17       	cp	r26, r30
    1b7e:	bf 07       	cpc	r27, r31
    1b80:	c8 f3       	brcs	.-14     	; 0x1b74 <strrev+0x10>
    1b82:	08 95       	ret

00001b84 <eeprom_write_byte>:
    1b84:	26 2f       	mov	r18, r22

00001b86 <eeprom_write_r18>:
    1b86:	e1 99       	sbic	0x1c, 1	; 28
    1b88:	fe cf       	rjmp	.-4      	; 0x1b86 <eeprom_write_r18>
    1b8a:	9f bb       	out	0x1f, r25	; 31
    1b8c:	8e bb       	out	0x1e, r24	; 30
    1b8e:	2d bb       	out	0x1d, r18	; 29
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	e2 9a       	sbi	0x1c, 2	; 28
    1b96:	e1 9a       	sbi	0x1c, 1	; 28
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	08 95       	ret

00001b9e <eeprom_write_word>:
    1b9e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <eeprom_write_byte>
    1ba2:	27 2f       	mov	r18, r23
    1ba4:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <eeprom_write_r18>

00001ba8 <_exit>:
    1ba8:	f8 94       	cli

00001baa <__stop_program>:
    1baa:	ff cf       	rjmp	.-2      	; 0x1baa <__stop_program>
